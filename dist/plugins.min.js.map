{"version":3,"file":"plugins.min.js","sources":["../node_modules/@neuronet.io/vido/vido.esm.js","../src/plugins/plugins.ts","../src/plugins/ItemHold.plugin.ts","../src/plugins/ItemMovement.plugin.ts","../src/plugins/SaveAsImage.plugin.ts","../src/plugins/Selection.plugin.ts","../src/plugins/CalendarScroll.plugin.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nconst directive = (f) => ((...args) => {\n    const d = f(...args);\n    // @ts-ignore\n    d.isDirective = true;\n    return d;\n});\nclass Directive {\n    constructor() {\n        this.isDirective = true;\n        this.isClass = true;\n    }\n    // @ts-ignore\n    body(part) {\n    }\n    runPart(part) {\n        return this.body(part);\n    }\n}\nconst isDirective = (o) => {\n    return o !== undefined && o !== null &&\n        // tslint:disable-next-line:no-any\n        typeof o.isDirective === 'boolean';\n};\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nconst isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nconst reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nconst removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n\n/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nconst noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nconst nothing = {};\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nconst boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nclass Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nconst isTemplatePartActive = (part) => part.index !== -1;\n/**\n * Used to clone existing node instead of each time creating new one which is\n * slower\n */\nconst markerNode = document.createComment('');\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nconst createMarker = () => markerNode.cloneNode();\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nclass TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n                part.commit();\n            }\n            i++;\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nlet policy;\n/**\n * Turns the value to trusted HTML. If the application uses Trusted Types the\n * value is transformed into TrustedHTML, which can be assigned to execution\n * sink. If the application doesn't use Trusted Types, the return value is the\n * same as the argument.\n */\nfunction convertConstantTemplateStringToTrustedHTML(value) {\n    // tslint:disable-next-line\n    const w = window;\n    // TrustedTypes have been renamed to trustedTypes\n    // (https://github.com/WICG/trusted-types/issues/177)\n    const trustedTypes = (w.trustedTypes || w.TrustedTypes);\n    if (trustedTypes && !policy) {\n        policy = trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });\n    }\n    return policy ? policy.createHTML(value) : value;\n}\nconst commentMarker = ` ${marker} `;\n/**\n * Used to clone existing node instead of each time creating new one which is\n * slower\n */\nconst emptyTemplateNode = document.createElement('template');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nclass TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = emptyTemplateNode.cloneNode();\n        // this is secure because `this.strings` is a TemplateStringsArray.\n        // TODO: validate this when\n        // https://github.com/tc39/proposal-array-is-template-object is implemented.\n        template.innerHTML =\n            convertConstantTemplateStringToTrustedHTML(this.getHTML());\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nclass SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nconst isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * A global callback used to sanitize any value before inserting it into the\n * DOM.\n */\nlet sanitizeDOMValueImpl;\nconst sanitizeDOMValue = (value, name, type, node) => {\n    if (sanitizeDOMValueImpl !== undefined) {\n        return sanitizeDOMValueImpl(value, name, type, node);\n    }\n    return value;\n};\n/**\n * Used to clone text node instead of each time creating new one which is slower\n */\nconst emptyTextNode = document.createTextNode('');\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nclass AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const parts = this.parts;\n        const l = strings.length - 1;\n        // If we're assigning an attribute via syntax like:\n        //    attr=\"${foo}\"  or  attr=${foo}\n        // but not\n        //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n        // then we don't want to coerce the attribute value into one long\n        // string. Instead we want to just return the value itself directly,\n        // so that sanitizeDOMValue can get the actual value rather than\n        // String(value)\n        // The exception is if v is an array, in which case we do want to smash\n        // it together into a string without calling String() on the array.\n        //\n        // This also allows trusted values (when using TrustedTypes) being\n        // assigned to DOM sinks without being stringified in the process.\n        if (l === 1 && strings[0] === '' && strings[1] === '' &&\n            parts[0] !== undefined) {\n            const v = parts[0].value;\n            if (!isIterable(v)) {\n                return v;\n            }\n        }\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            let value = this._getValue();\n            value = sanitizeDOMValue(value, this.name, 'attribute', this.element);\n            if (typeof value === 'symbol') {\n                // Native Symbols throw if they're coerced to string.\n                value = String(value);\n            }\n            this.element.setAttribute(this.name, value);\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nclass AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            // @ts-ignore\n            if (directive.isClass) {\n                // @ts-ignore\n                directive.runPart(this);\n            }\n            else {\n                directive(this);\n            }\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nclass NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            // @ts-ignore\n            if (directive.isClass) {\n                // @ts-ignore\n                directive.runPart(this);\n            }\n            else {\n                directive(this);\n            }\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            const renderedValue = sanitizeDOMValue(value, 'data', 'property', node);\n            node.data = typeof renderedValue === 'string' ?\n                renderedValue :\n                String(renderedValue);\n        }\n        else {\n            // When setting text content, for security purposes it matters a lot what\n            // the parent is. For example, <style> and <script> need to be handled\n            // with care, while <span> does not. So first we need to put a text node\n            // into the document, then we can sanitize its contentx.\n            const textNode = emptyTextNode.cloneNode();\n            this.__commitNode(textNode);\n            const renderedValue = sanitizeDOMValue(value, 'textContent', 'property', textNode);\n            textNode.data = typeof renderedValue === 'string' ? renderedValue :\n                String(renderedValue);\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // `value` is a template result that was constructed without knowledge of\n            // the parent we're about to write it into. sanitizeDOMValue hasn't been\n            // made aware of this relationship, and for scripts and style specifically\n            // this is known to be unsafe. So in the case where the user is in\n            // \"secure mode\" (i.e. when there's a sanitizeDOMValue set), we just want\n            // to forbid this because it's not a use case we want to support.\n            // We check for sanitizeDOMValue is to prevent this from\n            // being a breaking change to the library.\n            const parent = this.endNode.parentNode;\n            if (sanitizeDOMValueImpl !== undefined && parent.nodeName === 'STYLE' ||\n                parent.nodeName === 'SCRIPT') {\n                this.__commitText('/* lit-html will not write ' +\n                    'TemplateResults to scripts and styles */');\n                return;\n            }\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nclass BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            // @ts-ignore\n            if (directive.isClass) {\n                // @ts-ignore\n                directive.runPart(this);\n            }\n            else {\n                directive(this);\n            }\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nclass PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            let value = this._getValue();\n            value = sanitizeDOMValue(value, this.name, 'property', this.element);\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = value;\n        }\n    }\n}\nclass PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nclass EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            // @ts-ignore\n            if (directive.isClass) {\n                // @ts-ignore\n                directive.runPart(this);\n            }\n            else {\n                directive(this);\n            }\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Creates Parts when a template is instantiated.\n */\nclass DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nconst defaultTemplateProcessor = new DefaultTemplateProcessor();\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nfunction templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nconst templateCaches = new Map();\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nconst render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nconst html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nconst svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n\nvar litHtml = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    html: html,\n    svg: svg,\n    DefaultTemplateProcessor: DefaultTemplateProcessor,\n    defaultTemplateProcessor: defaultTemplateProcessor,\n    directive: directive,\n    Directive: Directive,\n    isDirective: isDirective,\n    removeNodes: removeNodes,\n    reparentNodes: reparentNodes,\n    noChange: noChange,\n    nothing: nothing,\n    AttributeCommitter: AttributeCommitter,\n    AttributePart: AttributePart,\n    BooleanAttributePart: BooleanAttributePart,\n    EventPart: EventPart,\n    isIterable: isIterable,\n    isPrimitive: isPrimitive,\n    NodePart: NodePart,\n    PropertyCommitter: PropertyCommitter,\n    PropertyPart: PropertyPart,\n    parts: parts,\n    render: render,\n    templateCaches: templateCaches,\n    templateFactory: templateFactory,\n    TemplateInstance: TemplateInstance,\n    SVGTemplateResult: SVGTemplateResult,\n    TemplateResult: TemplateResult,\n    createMarker: createMarker,\n    isTemplatePartActive: isTemplatePartActive,\n    Template: Template\n});\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar __asyncValues = (undefined && undefined.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\n/**\n * A directive that renders the items of an async iterable[1], appending new\n * values after previous values, similar to the built-in support for iterables.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is appended to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nconst asyncAppend = directive((value, mapper) => async (part) => {\n    var e_1, _a;\n    if (!(part instanceof NodePart)) {\n        throw new Error('asyncAppend can only be used in text bindings');\n    }\n    // If we've already set up this particular iterable, we don't need\n    // to do anything.\n    if (value === part.value) {\n        return;\n    }\n    part.value = value;\n    // We keep track of item Parts across iterations, so that we can\n    // share marker nodes between consecutive Parts.\n    let itemPart;\n    let i = 0;\n    try {\n        for (var value_1 = __asyncValues(value), value_1_1; value_1_1 = await value_1.next(), !value_1_1.done;) {\n            let v = value_1_1.value;\n            // Check to make sure that value is the still the current value of\n            // the part, and if not bail because a new value owns this part\n            if (part.value !== value) {\n                break;\n            }\n            // When we get the first value, clear the part. This lets the\n            // previous value display until we can replace it.\n            if (i === 0) {\n                part.clear();\n            }\n            // As a convenience, because functional-programming-style\n            // transforms of iterables and async iterables requires a library,\n            // we accept a mapper function. This is especially convenient for\n            // rendering a template for each item.\n            if (mapper !== undefined) {\n                // This is safe because T must otherwise be treated as unknown by\n                // the rest of the system.\n                v = mapper(v, i);\n            }\n            // Like with sync iterables, each item induces a Part, so we need\n            // to keep track of start and end nodes for the Part.\n            // Note: Because these Parts are not updatable like with a sync\n            // iterable (if we render a new value, we always clear), it may\n            // be possible to optimize away the Parts and just re-use the\n            // Part.setValue() logic.\n            let itemStartNode = part.startNode;\n            // Check to see if we have a previous item and Part\n            if (itemPart !== undefined) {\n                // Create a new node to separate the previous and next Parts\n                itemStartNode = createMarker();\n                // itemPart is currently the Part for the previous item. Set\n                // it's endNode to the node we'll use for the next Part's\n                // startNode.\n                itemPart.endNode = itemStartNode;\n                part.endNode.parentNode.insertBefore(itemStartNode, part.endNode);\n            }\n            itemPart = new NodePart(part.options);\n            itemPart.insertAfterNode(itemStartNode);\n            itemPart.setValue(v);\n            itemPart.commit();\n            i++;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (value_1_1 && !value_1_1.done && (_a = value_1.return)) await _a.call(value_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n});\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar __asyncValues$1 = (undefined && undefined.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\n/**\n * A directive that renders the items of an async iterable[1], replacing\n * previous values with new values, so that only one value is ever rendered\n * at a time.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is rendered to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nconst asyncReplace = directive((value, mapper) => async (part) => {\n    var e_1, _a;\n    if (!(part instanceof NodePart)) {\n        throw new Error('asyncReplace can only be used in text bindings');\n    }\n    // If we've already set up this particular iterable, we don't need\n    // to do anything.\n    if (value === part.value) {\n        return;\n    }\n    // We nest a new part to keep track of previous item values separately\n    // of the iterable as a value itself.\n    const itemPart = new NodePart(part.options);\n    part.value = value;\n    let i = 0;\n    try {\n        for (var value_1 = __asyncValues$1(value), value_1_1; value_1_1 = await value_1.next(), !value_1_1.done;) {\n            let v = value_1_1.value;\n            // Check to make sure that value is the still the current value of\n            // the part, and if not bail because a new value owns this part\n            if (part.value !== value) {\n                break;\n            }\n            // When we get the first value, clear the part. This let's the\n            // previous value display until we can replace it.\n            if (i === 0) {\n                part.clear();\n                itemPart.appendIntoPart(part);\n            }\n            // As a convenience, because functional-programming-style\n            // transforms of iterables and async iterables requires a library,\n            // we accept a mapper function. This is especially convenient for\n            // rendering a template for each item.\n            if (mapper !== undefined) {\n                // This is safe because T must otherwise be treated as unknown by\n                // the rest of the system.\n                v = mapper(v, i);\n            }\n            itemPart.setValue(v);\n            itemPart.commit();\n            i++;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (value_1_1 && !value_1_1.done && (_a = value_1.return)) await _a.call(value_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n});\n\n/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst templateCaches$1 = new WeakMap();\n/**\n * Enables fast switching between multiple templates by caching the DOM nodes\n * and TemplateInstances produced by the templates.\n *\n * Example:\n *\n * ```\n * let checked = false;\n *\n * html`\n *   ${cache(checked ? html`input is checked` : html`input is not checked`)}\n * `\n * ```\n */\nconst cache = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('cache can only be used in text bindings');\n    }\n    let templateCache = templateCaches$1.get(part);\n    if (templateCache === undefined) {\n        templateCache = new WeakMap();\n        templateCaches$1.set(part, templateCache);\n    }\n    const previousValue = part.value;\n    // First, can we update the current TemplateInstance, or do we need to move\n    // the current nodes into the cache?\n    if (previousValue instanceof TemplateInstance) {\n        if (value instanceof TemplateResult &&\n            previousValue.template === part.options.templateFactory(value)) {\n            // Same Template, just trigger an update of the TemplateInstance\n            part.setValue(value);\n            return;\n        }\n        else {\n            // Not the same Template, move the nodes from the DOM into the cache.\n            let cachedTemplate = templateCache.get(previousValue.template);\n            if (cachedTemplate === undefined) {\n                cachedTemplate = {\n                    instance: previousValue,\n                    nodes: document.createDocumentFragment(),\n                };\n                templateCache.set(previousValue.template, cachedTemplate);\n            }\n            reparentNodes(cachedTemplate.nodes, part.startNode.nextSibling, part.endNode);\n        }\n    }\n    // Next, can we reuse nodes from the cache?\n    if (value instanceof TemplateResult) {\n        const template = part.options.templateFactory(value);\n        const cachedTemplate = templateCache.get(template);\n        if (cachedTemplate !== undefined) {\n            // Move nodes out of cache\n            part.setValue(cachedTemplate.nodes);\n            part.commit();\n            // Set the Part value to the TemplateInstance so it'll update it.\n            part.value = cachedTemplate.instance;\n        }\n    }\n    part.setValue(value);\n});\n\n/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nconst classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    let previousClasses = previousClassesCache.get(part);\n    if (previousClasses === undefined) {\n        // Write static classes once\n        element.className = committer.strings.join(' ');\n        previousClassesCache.set(part, previousClasses = new Set());\n    }\n    const { classList } = element;\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    previousClasses.forEach((name) => {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n            previousClasses.delete(name);\n        }\n    });\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        // We explicitly want a loose truthy check of `value` because it seems more\n        // convenient that '' and 0 are skipped.\n        // tslint:disable-next-line: triple-equals\n        if (value != previousClasses.has(name)) {\n            if (value) {\n                classList.add(name);\n                previousClasses.add(name);\n            }\n            else {\n                classList.remove(name);\n                previousClasses.delete(name);\n            }\n        }\n    }\n});\n\n/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst previousValues = new WeakMap();\n/**\n * Prevents re-render of a template function until a single value or an array of\n * values changes.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([user.id, company.id], () => html`...`)}\n *   </div>\n * ```\n *\n * In this case, the template only renders if either `user.id` or `company.id`\n * changes.\n *\n * guard() is useful with immutable data patterns, by preventing expensive work\n * until data updates.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n *   </div>\n * ```\n *\n * In this case, items are mapped over only when the array reference changes.\n *\n * @param value the value to check before re-rendering\n * @param f the template function\n */\nconst guard = directive((value, f) => (part) => {\n    const previousValue = previousValues.get(part);\n    if (Array.isArray(value)) {\n        // Dirty-check arrays by item\n        if (Array.isArray(previousValue) &&\n            previousValue.length === value.length &&\n            value.every((v, i) => v === previousValue[i])) {\n            return;\n        }\n    }\n    else if (previousValue === value &&\n        (value !== undefined || previousValues.has(part))) {\n        // Dirty-check non-arrays by identity\n        return;\n    }\n    part.setValue(f());\n    // Copy the value if it's an array so that if it's mutated we don't forget\n    // what the previous values were.\n    previousValues.set(part, Array.isArray(value) ? Array.from(value) : value);\n});\n\n/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nconst ifDefined = directive((value) => (part) => {\n    if (value === undefined && part instanceof AttributePart) {\n        if (value !== part.value) {\n            const name = part.committer.name;\n            part.committer.element.removeAttribute(name);\n        }\n    }\n    else {\n        part.setValue(value);\n    }\n});\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart = (containerPart, beforePart) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = beforePart === undefined ? containerPart.endNode :\n        beforePart.startNode;\n    const startNode = container.insertBefore(createMarker(), beforeNode);\n    container.insertBefore(createMarker(), beforeNode);\n    const newPart = new NodePart(containerPart.options);\n    newPart.insertAfterNode(startNode);\n    return newPart;\n};\nconst updatePart = (part, value) => {\n    part.setValue(value);\n    part.commit();\n    return part;\n};\nconst insertPartBefore = (containerPart, part, ref) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = ref ? ref.startNode : containerPart.endNode;\n    const endNode = part.endNode.nextSibling;\n    if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n    }\n};\nconst removePart = (part) => {\n    removeNodes(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);\n};\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list, start, end) => {\n    const map = new Map();\n    for (let i = start; i <= end; i++) {\n        map.set(list[i], i);\n    }\n    return map;\n};\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap();\nconst keyListCache = new WeakMap();\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nconst repeat = directive((items, keyFnOrTemplate, template) => {\n    let keyFn;\n    if (template === undefined) {\n        template = keyFnOrTemplate;\n    }\n    else if (keyFnOrTemplate !== undefined) {\n        keyFn = keyFnOrTemplate;\n    }\n    return (containerPart) => {\n        if (!(containerPart instanceof NodePart)) {\n            throw new Error('repeat can only be used in text bindings');\n        }\n        // Old part & key lists are retrieved from the last update\n        // (associated with the part for this instance of the directive)\n        const oldParts = partListCache.get(containerPart) || [];\n        const oldKeys = keyListCache.get(containerPart) || [];\n        // New part list will be built up as we go (either reused from\n        // old parts or created for new keys in this update). This is\n        // saved in the above cache at the end of the update.\n        const newParts = [];\n        // New value list is eagerly generated from items along with a\n        // parallel array indicating its key.\n        const newValues = [];\n        const newKeys = [];\n        let index = 0;\n        for (const item of items) {\n            newKeys[index] = keyFn ? keyFn(item, index) : index;\n            newValues[index] = template(item, index);\n            index++;\n        }\n        // Maps from key to index for current and previous update; these\n        // are generated lazily only when needed as a performance\n        // optimization, since they are only required for multiple\n        // non-contiguous changes in the list, which are less common.\n        let newKeyToIndexMap;\n        let oldKeyToIndexMap;\n        // Head and tail pointers to old parts and new values\n        let oldHead = 0;\n        let oldTail = oldParts.length - 1;\n        let newHead = 0;\n        let newTail = newValues.length - 1;\n        // Overview of O(n) reconciliation algorithm (general approach\n        // based on ideas found in ivi, vue, snabbdom, etc.):\n        //\n        // * We start with the list of old parts and new values (and\n        //   arrays of their respective keys), head/tail pointers into\n        //   each, and we build up the new list of parts by updating\n        //   (and when needed, moving) old parts or creating new ones.\n        //   The initial scenario might look like this (for brevity of\n        //   the diagrams, the numbers in the array reflect keys\n        //   associated with the old parts or new values, although keys\n        //   and parts/values are actually stored in parallel arrays\n        //   indexed using the same head/tail pointers):\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n        //                                      item order\n        //      newHead ^                 ^ newTail\n        //\n        // * Iterate old & new lists from both sides, updating,\n        //   swapping, or removing parts at the head/tail locations\n        //   until neither head nor tail can move.\n        //\n        // * Example below: keys at head pointers match, so update old\n        //   part 0 in-place (no need to move it) and record part 0 in\n        //   the `newParts` list. The last thing we do is advance the\n        //   `oldHead` and `newHead` pointers (will be reflected in the\n        //   next diagram).\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //      newHead ^                 ^ newTail\n        //\n        // * Example below: head pointers don't match, but tail\n        //   pointers do, so update part 6 in place (no need to move\n        //   it), and record part 6 in the `newParts` list. Last,\n        //   advance the `oldTail` and `oldHead` pointers.\n        //\n        //         oldHead v              v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n        //                                      & newTail\n        //         newHead ^              ^ newTail\n        //\n        // * If neither head nor tail match; next check if one of the\n        //   old head/tail items was removed. We first need to generate\n        //   the reverse map of new keys to index (`newKeyToIndexMap`),\n        //   which is done once lazily as a performance optimization,\n        //   since we only hit this case if multiple non-contiguous\n        //   changes were made. Note that for contiguous removal\n        //   anywhere in the list, the head and tails would advance\n        //   from either end and pass each other before we get to this\n        //   case and removals would be handled in the final while loop\n        //   without needing to generate the map.\n        //\n        // * Example below: The key at `oldTail` was removed (no longer\n        //   in the `newKeyToIndexMap`), so remove that part from the\n        //   DOM and advance just the `oldTail` pointer.\n        //\n        //         oldHead v           v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n        //         newHead ^           ^ newTail\n        //\n        // * Once head and tail cannot move, any mismatches are due to\n        //   either new or moved items; if a new key is in the previous\n        //   \"old key to old index\" map, move the old part to the new\n        //   location, otherwise create and insert a new part. Note\n        //   that when moving an old part we null its position in the\n        //   oldParts array if it lies between the head and tail so we\n        //   know to skip it when the pointers get there.\n        //\n        // * Example below: neither head nor tail match, and neither\n        //   were removed; so find the `newHead` key in the\n        //   `oldKeyToIndexMap`, and move that old part's DOM into the\n        //   next head position (before `oldParts[oldHead]`). Last,\n        //   null the part in the `oldPart` array since it was\n        //   somewhere in the remaining oldParts still to be scanned\n        //   (between the head and tail pointers) so that we know to\n        //   skip that old part on future iterations.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n        //                                      newHead\n        //         newHead ^           ^ newTail\n        //\n        // * Note that for moves/insertions like the one above, a part\n        //   inserted at the head pointer is inserted before the\n        //   current `oldParts[oldHead]`, and a part inserted at the\n        //   tail pointer is inserted before `newParts[newTail+1]`. The\n        //   seeming asymmetry lies in the fact that new parts are\n        //   moved into place outside in, so to the right of the head\n        //   pointer are old parts, and to the right of the tail\n        //   pointer are new parts.\n        //\n        // * We always restart back from the top of the algorithm,\n        //   allowing matching and simple updates in place to\n        //   continue...\n        //\n        // * Example below: the head pointers once again match, so\n        //   simply update part 1 and record it in the `newParts`\n        //   array.  Last, advance both head pointers.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //            newHead ^        ^ newTail\n        //\n        // * As mentioned above, items that were moved as a result of\n        //   being stuck (the final else clause in the code below) are\n        //   marked with null, so we always advance old pointers over\n        //   these so we're comparing the next actual old value on\n        //   either end.\n        //\n        // * Example below: `oldHead` is null (already placed in\n        //   newParts), so advance `oldHead`.\n        //\n        //            oldHead v     v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n        //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //               newHead ^     ^ newTail\n        //\n        // * Note it's not critical to mark old parts as null when they\n        //   are moved from head to tail or tail to head, since they\n        //   will be outside the pointer range and never visited again.\n        //\n        // * Example below: Here the old tail key matches the new head\n        //   key, so the part at the `oldTail` position and move its\n        //   DOM to the new head position (before `oldParts[oldHead]`).\n        //   Last, advance `oldTail` and `newHead` pointers.\n        //\n        //               oldHead v  v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n        //                                     advance oldTail & newHead\n        //               newHead ^     ^ newTail\n        //\n        // * Example below: Old and new head keys match, so update the\n        //   old head part in place, and advance the `oldHead` and\n        //   `newHead` pointers.\n        //\n        //               oldHead v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n        //                                      newHead\n        //                  newHead ^  ^ newTail\n        //\n        // * Once the new or old pointers move past each other then all\n        //   we have left is additions (if old list exhausted) or\n        //   removals (if new list exhausted). Those are handled in the\n        //   final while loops at the end.\n        //\n        // * Example below: `oldHead` exceeded `oldTail`, so we're done\n        //   with the main loop.  Create the remaining part and insert\n        //   it at the new head position, and the update is complete.\n        //\n        //                   (oldHead > oldTail)\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //                     newHead ^ newTail\n        //\n        // * Note that the order of the if/else clauses is not\n        //   important to the algorithm, as long as the null checks\n        //   come first (to ensure we're always working on valid old\n        //   parts) and that the final else clause comes last (since\n        //   that's where the expensive moves occur). The order of\n        //   remaining clauses is is just a simple guess at which cases\n        //   will be most common.\n        //\n        // * TODO(kschaaf) Note, we could calculate the longest\n        //   increasing subsequence (LIS) of old items in new position,\n        //   and only move those not in the LIS set. However that costs\n        //   O(nlogn) time and adds a bit more code, and only helps\n        //   make rare types of mutations require fewer moves. The\n        //   above handles removes, adds, reversal, swaps, and single\n        //   moves of contiguous items in linear time, in the minimum\n        //   number of moves. As the number of multiple moves where LIS\n        //   might help approaches a random shuffle, the LIS\n        //   optimization becomes less helpful, so it seems not worth\n        //   the code at this point. Could reconsider if a compelling\n        //   case arises.\n        while (oldHead <= oldTail && newHead <= newTail) {\n            if (oldParts[oldHead] === null) {\n                // `null` means old part at head has already been used\n                // below; skip\n                oldHead++;\n            }\n            else if (oldParts[oldTail] === null) {\n                // `null` means old part at tail has already been used\n                // below; skip\n                oldTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newHead]) {\n                // Old head matches new head; update in place\n                newParts[newHead] =\n                    updatePart(oldParts[oldHead], newValues[newHead]);\n                oldHead++;\n                newHead++;\n            }\n            else if (oldKeys[oldTail] === newKeys[newTail]) {\n                // Old tail matches new tail; update in place\n                newParts[newTail] =\n                    updatePart(oldParts[oldTail], newValues[newTail]);\n                oldTail--;\n                newTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newTail]) {\n                // Old head matches new tail; update and move to new tail\n                newParts[newTail] =\n                    updatePart(oldParts[oldHead], newValues[newTail]);\n                insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);\n                oldHead++;\n                newTail--;\n            }\n            else if (oldKeys[oldTail] === newKeys[newHead]) {\n                // Old tail matches new head; update and move to new head\n                newParts[newHead] =\n                    updatePart(oldParts[oldTail], newValues[newHead]);\n                insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);\n                oldTail--;\n                newHead++;\n            }\n            else {\n                if (newKeyToIndexMap === undefined) {\n                    // Lazily generate key-to-index maps, used for removals &\n                    // moves below\n                    newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                    oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                }\n                if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                    // Old head is no longer in new list; remove\n                    removePart(oldParts[oldHead]);\n                    oldHead++;\n                }\n                else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                    // Old tail is no longer in new list; remove\n                    removePart(oldParts[oldTail]);\n                    oldTail--;\n                }\n                else {\n                    // Any mismatches at this point are due to additions or\n                    // moves; see if we have an old part we can reuse and move\n                    // into place\n                    const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                    const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n                    if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                    }\n                    else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(containerPart, oldPart, oldParts[oldHead]);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex] = null;\n                    }\n                    newHead++;\n                }\n            }\n        }\n        // Add parts for any remaining new values\n        while (newHead <= newTail) {\n            // For all remaining additions, we insert before last new\n            // tail, since old pointers are no longer valid\n            const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);\n            updatePart(newPart, newValues[newHead]);\n            newParts[newHead++] = newPart;\n        }\n        // Remove any remaining unused old parts\n        while (oldHead <= oldTail) {\n            const oldPart = oldParts[oldHead++];\n            if (oldPart !== null) {\n                removePart(oldPart);\n            }\n        }\n        // Save order of new parts for next round\n        partListCache.set(containerPart, newParts);\n        keyListCache.set(containerPart, newKeys);\n    };\n});\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues$1 = new WeakMap();\n/**\n * Used to clone existing node instead of each time creating new one which is\n * slower\n */\nconst emptyTemplateNode$1 = document.createElement('template');\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nconst unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('unsafeHTML can only be used in text bindings');\n    }\n    const previousValue = previousValues$1.get(part);\n    if (previousValue !== undefined && isPrimitive(value) &&\n        value === previousValue.value && part.value === previousValue.fragment) {\n        return;\n    }\n    const template = emptyTemplateNode$1.cloneNode();\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousValues$1.set(part, { value, fragment });\n});\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst _state = new WeakMap();\n// Effectively infinity, but a SMI.\nconst _infinity = 0x7fffffff;\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n *     const content = fetch('./content.txt').then(r => r.text());\n *     html`${until(content, html`<span>Loading...</span>`)}`\n */\nconst until = directive((...args) => (part) => {\n    let state = _state.get(part);\n    if (state === undefined) {\n        state = {\n            lastRenderedIndex: _infinity,\n            values: [],\n        };\n        _state.set(part, state);\n    }\n    const previousValues = state.values;\n    let previousLength = previousValues.length;\n    state.values = args;\n    for (let i = 0; i < args.length; i++) {\n        // If we've rendered a higher-priority value already, stop.\n        if (i > state.lastRenderedIndex) {\n            break;\n        }\n        const value = args[i];\n        // Render non-Promise values immediately\n        if (isPrimitive(value) ||\n            typeof value.then !== 'function') {\n            part.setValue(value);\n            state.lastRenderedIndex = i;\n            // Since a lower-priority value will never overwrite a higher-priority\n            // synchronous value, we can stop processing now.\n            break;\n        }\n        // If this is a Promise we've already handled, skip it.\n        if (i < previousLength && value === previousValues[i]) {\n            continue;\n        }\n        // We have a Promise that we haven't seen before, so priorities may have\n        // changed. Forget what we rendered before.\n        state.lastRenderedIndex = _infinity;\n        previousLength = 0;\n        Promise.resolve(value).then((resolvedValue) => {\n            const index = state.values.indexOf(value);\n            // If state.values doesn't contain the value, we've re-rendered without\n            // the value, so don't render it. Then, only render if the value is\n            // higher-priority than what's already been rendered.\n            if (index > -1 && index < state.lastRenderedIndex) {\n                state.lastRenderedIndex = index;\n                part.setValue(resolvedValue);\n                part.commit();\n            }\n        });\n    }\n});\n\nconst detached = new WeakMap();\nclass Detach extends Directive {\n    constructor(ifFn) {\n        super();\n        this.ifFn = ifFn;\n    }\n    body(part) {\n        const detach = this.ifFn();\n        const element = part.committer.element;\n        if (detach) {\n            if (!detached.has(part)) {\n                const nextSibling = element.nextSibling;\n                detached.set(part, { element, nextSibling });\n            }\n            element.remove();\n        }\n        else {\n            const data = detached.get(part);\n            if (typeof data !== 'undefined' && data !== null) {\n                data.nextSibling.parentNode.insertBefore(data.element, data.nextSibling);\n                detached.delete(part);\n            }\n        }\n    }\n}\n\nconst toRemove = [], toUpdate = [];\nclass StyleMap extends Directive {\n    constructor(styleInfo, detach = false) {\n        super();\n        this.previous = {};\n        this.style = styleInfo;\n        this.detach = detach;\n    }\n    setStyle(styleInfo) {\n        this.style = styleInfo;\n    }\n    setDetach(detach) {\n        this.detach = detach;\n    }\n    body(part) {\n        toRemove.length = 0;\n        toUpdate.length = 0;\n        // @ts-ignore\n        const element = part.committer.element;\n        const style = element.style;\n        let previous = this.previous;\n        for (const name in previous) {\n            if (this.style[name] === undefined) {\n                toRemove.push(name);\n            }\n        }\n        for (const name in this.style) {\n            const value = this.style[name];\n            const prev = previous[name];\n            if (prev !== undefined && prev === value) {\n                continue;\n            }\n            toUpdate.push(name);\n        }\n        if (toRemove.length || toUpdate.length) {\n            let parent, nextSibling;\n            if (this.detach) {\n                parent = element.parentNode;\n                if (parent) {\n                    nextSibling = element.nextSibling;\n                    element.remove();\n                }\n            }\n            for (const name of toRemove) {\n                style.removeProperty(name);\n            }\n            for (const name of toUpdate) {\n                const value = this.style[name];\n                if (!name.includes('-')) {\n                    style[name] = value;\n                }\n                else {\n                    style.setProperty(name, value);\n                }\n            }\n            if (this.detach && parent) {\n                parent.insertBefore(element, nextSibling);\n            }\n            this.previous = Object.assign({}, this.style);\n        }\n    }\n}\n\nclass Action {\n    constructor() {\n        this.isAction = true;\n    }\n}\nAction.prototype.isAction = true;\n\nconst defaultOptions = {\n    element: document.createTextNode(''),\n    axis: 'xy',\n    threshold: 10,\n    onDown(data) { },\n    onMove(data) { },\n    onUp(data) { },\n    onWheel(data) { }\n};\nclass PointerAction extends Action {\n    constructor(element, data) {\n        super();\n        this.moving = '';\n        this.initialX = 0;\n        this.initialY = 0;\n        this.lastY = 0;\n        this.lastX = 0;\n        this.onPointerStart = this.onPointerStart.bind(this);\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.onPointerEnd = this.onPointerEnd.bind(this);\n        this.onWheel = this.onWheel.bind(this);\n        this.options = Object.assign(Object.assign({}, defaultOptions), data.pointerOptions);\n        element.addEventListener('touchstart', this.onPointerStart);\n        element.addEventListener('mousedown', this.onPointerStart);\n        document.addEventListener('touchmove', this.onPointerMove);\n        document.addEventListener('touchend', this.onPointerEnd);\n        document.addEventListener('mousemove', this.onPointerMove);\n        document.addEventListener('mouseup', this.onPointerEnd);\n    }\n    normalizeMouseWheelEvent(event) {\n        // @ts-ignore\n        let x = event.deltaX || 0;\n        // @ts-ignore\n        let y = event.deltaY || 0;\n        // @ts-ignore\n        let z = event.deltaZ || 0;\n        // @ts-ignore\n        const mode = event.deltaMode;\n        // @ts-ignore\n        const lineHeight = parseInt(getComputedStyle(event.target).getPropertyValue('line-height'));\n        let scale = 1;\n        switch (mode) {\n            case 1:\n                scale = lineHeight;\n                break;\n            case 2:\n                // @ts-ignore\n                scale = window.height;\n                break;\n        }\n        x *= scale;\n        y *= scale;\n        z *= scale;\n        return { x, y, z, event };\n    }\n    onWheel(event) {\n        const normalized = this.normalizeMouseWheelEvent(event);\n        this.options.onWheel(normalized);\n    }\n    normalizePointerEvent(event) {\n        let x = 0, y = 0;\n        switch (event.type) {\n            case 'mousedown':\n            case 'mousemove':\n            case 'mouseup':\n                x = event.x;\n                y = event.y;\n                break;\n            case 'touchstart':\n            case 'touchmove':\n                x = event.touches[0].screenX;\n                y = event.touches[0].screenY;\n                break;\n            case 'touchend':\n                x = event.changedTouches[0].screenX;\n                y = event.changedTouches[0].screenY;\n                break;\n        }\n        return { x, y, event };\n    }\n    onPointerStart(event) {\n        if (event.type === 'mousedown' && event.button !== 0)\n            return;\n        this.moving = 'xy';\n        const normalized = this.normalizePointerEvent(event);\n        this.lastX = normalized.x;\n        this.lastY = normalized.y;\n        this.initialX = normalized.x;\n        this.initialY = normalized.y;\n        this.options.onDown({ x: normalized.x, y: normalized.y, event });\n    }\n    handleX(normalized) {\n        let movementX = normalized.x - this.lastX;\n        this.lastY = normalized.y;\n        this.lastX = normalized.x;\n        return movementX;\n    }\n    handleY(normalized) {\n        let movementY = normalized.y - this.lastY;\n        this.lastY = normalized.y;\n        this.lastX = normalized.x;\n        return movementY;\n    }\n    onPointerMove(event) {\n        if (this.moving === '' || (event.type === 'mousemove' && event.button !== 0))\n            return;\n        const normalized = this.normalizePointerEvent(event);\n        if (this.options.axis === 'x|y') {\n            let movementX = 0, movementY = 0;\n            if (this.moving === 'x' ||\n                (this.moving === 'xy' && Math.abs(normalized.x - this.initialX) > this.options.threshold)) {\n                this.moving = 'x';\n                movementX = this.handleX(normalized);\n            }\n            if (this.moving === 'y' ||\n                (this.moving === 'xy' && Math.abs(normalized.y - this.initialY) > this.options.threshold)) {\n                this.moving = 'y';\n                movementY = this.handleY(normalized);\n            }\n            this.options.onMove({\n                movementX,\n                movementY,\n                x: normalized.x,\n                y: normalized.y,\n                initialX: this.initialX,\n                initialY: this.initialY,\n                lastX: this.lastX,\n                lastY: this.lastY,\n                event\n            });\n        }\n        else if (this.options.axis === 'xy') {\n            let movementX = 0, movementY = 0;\n            if (Math.abs(normalized.x - this.initialX) > this.options.threshold) {\n                movementX = this.handleX(normalized);\n            }\n            if (Math.abs(normalized.y - this.initialY) > this.options.threshold) {\n                movementY = this.handleY(normalized);\n            }\n            this.options.onMove({\n                movementX,\n                movementY,\n                x: normalized.x,\n                y: normalized.y,\n                initialX: this.initialX,\n                initialY: this.initialY,\n                lastX: this.lastX,\n                lastY: this.lastY,\n                event\n            });\n        }\n        else if (this.options.axis === 'x') {\n            if (this.moving === 'x' ||\n                (this.moving === 'xy' && Math.abs(normalized.x - this.initialX) > this.options.threshold)) {\n                this.moving = 'x';\n                this.options.onMove({\n                    movementX: this.handleX(normalized),\n                    movementY: 0,\n                    initialX: this.initialX,\n                    initialY: this.initialY,\n                    lastX: this.lastX,\n                    lastY: this.lastY,\n                    event\n                });\n            }\n        }\n        else if (this.options.axis === 'y') {\n            let movementY = 0;\n            if (this.moving === 'y' ||\n                (this.moving === 'xy' && Math.abs(normalized.y - this.initialY) > this.options.threshold)) {\n                this.moving = 'y';\n                movementY = this.handleY(normalized);\n            }\n            this.options.onMove({\n                movementX: 0,\n                movementY,\n                x: normalized.x,\n                y: normalized.y,\n                initialX: this.initialX,\n                initialY: this.initialY,\n                lastX: this.lastX,\n                lastY: this.lastY,\n                event\n            });\n        }\n    }\n    onPointerEnd(event) {\n        this.moving = '';\n        const normalized = this.normalizePointerEvent(event);\n        this.options.onUp({\n            movementX: 0,\n            movementY: 0,\n            x: normalized.x,\n            y: normalized.y,\n            initialX: this.initialX,\n            initialY: this.initialY,\n            lastX: this.lastX,\n            lastY: this.lastY,\n            event\n        });\n        this.lastY = 0;\n        this.lastX = 0;\n    }\n    destroy(element) {\n        element.removeEventListener('touchstart', this.onPointerStart);\n        element.removeEventListener('mousedown', this.onPointerStart);\n        document.removeEventListener('touchmove', this.onPointerMove);\n        document.removeEventListener('touchend', this.onPointerEnd);\n        document.removeEventListener('mousemove', this.onPointerMove);\n        document.removeEventListener('mouseup', this.onPointerEnd);\n    }\n}\n\nfunction getPublicComponentMethods(components, actionsByInstance, clone) {\n    return class PublicComponentMethods {\n        constructor(instance, vidoInstance, props = {}) {\n            this.instance = instance;\n            this.vidoInstance = vidoInstance;\n            this.props = props;\n            this.destroy = this.destroy.bind(this);\n            this.update = this.update.bind(this);\n            this.change = this.change.bind(this);\n            this.html = this.html.bind(this);\n        }\n        /**\n         * Destroy component\n         */\n        destroy() {\n            if (this.vidoInstance.debug) {\n                console.groupCollapsed(`destroying component ${this.instance}`);\n                console.log(clone({ components: components.keys(), actionsByInstance }));\n                console.trace();\n                console.groupEnd();\n            }\n            return this.vidoInstance.destroyComponent(this.instance, this.vidoInstance);\n        }\n        /**\n         * Update template - trigger rendering process\n         */\n        update() {\n            if (this.vidoInstance.debug) {\n                console.groupCollapsed(`updating component ${this.instance}`);\n                console.log(clone({ components: components.keys(), actionsByInstance }));\n                console.trace();\n                console.groupEnd();\n            }\n            return this.vidoInstance.updateTemplate(this.vidoInstance);\n        }\n        /**\n         * Change component input properties\n         * @param {any} newProps\n         */\n        change(newProps, options) {\n            if (this.vidoInstance.debug) {\n                console.groupCollapsed(`changing component ${this.instance}`);\n                console.log(clone({ props: this.props, newProps: newProps, components: components.keys(), actionsByInstance }));\n                console.trace();\n                console.groupEnd();\n            }\n            components.get(this.instance).change(newProps, options);\n        }\n        /**\n         * Get component lit-html template\n         * @param {} templateProps\n         */\n        html(templateProps = {}) {\n            return components.get(this.instance).update(templateProps, this.vidoInstance);\n        }\n    };\n}\n\nfunction getActionsCollector(actionsByInstance) {\n    return class ActionsCollector extends Directive {\n        constructor(instance) {\n            super();\n            this.instance = instance;\n        }\n        set(actions, props, debug = false) {\n            this.actions = actions;\n            this.props = props; // must be mutable! (do not do this {...props})\n            // because we will modify action props with onChange and can reuse existin instance\n            if (debug) {\n                console.log(this);\n            }\n            return this;\n        }\n        body(part) {\n            const element = part.committer.element;\n            for (const create of this.actions) {\n                if (typeof create !== 'undefined') {\n                    let exists;\n                    if (actionsByInstance.has(this.instance)) {\n                        for (const action of actionsByInstance.get(this.instance)) {\n                            if (action.componentAction.create === create && action.element === element) {\n                                exists = action;\n                                break;\n                            }\n                        }\n                    }\n                    if (!exists) {\n                        // @ts-ignore\n                        if (typeof element.vido !== 'undefined')\n                            delete element.vido;\n                        const componentAction = { create, update() { }, destroy() { } };\n                        const action = { instance: this.instance, componentAction, element, props: this.props };\n                        let byInstance = [];\n                        if (actionsByInstance.has(this.instance)) {\n                            byInstance = actionsByInstance.get(this.instance);\n                        }\n                        byInstance.push(action);\n                        actionsByInstance.set(this.instance, byInstance);\n                    }\n                    else {\n                        exists.props = this.props;\n                    }\n                }\n            }\n        }\n    };\n}\n\nfunction getInternalComponentMethods(components, actionsByInstance, clone) {\n    return class InternalComponentMethods {\n        constructor(instance, vidoInstance, updateFunction) {\n            this.instance = instance;\n            this.vidoInstance = vidoInstance;\n            this.updateFunction = updateFunction;\n        }\n        destroy() {\n            if (this.vidoInstance.debug) {\n                console.groupCollapsed(`component destroy method fired ${this.instance}`);\n                console.log(clone({\n                    props: this.vidoInstance.props,\n                    components: components.keys(),\n                    destroyable: this.vidoInstance.destroyable,\n                    actionsByInstance\n                }));\n                console.trace();\n                console.groupEnd();\n            }\n            for (const d of this.vidoInstance.destroyable) {\n                d();\n            }\n            this.vidoInstance.onChangeFunctions = [];\n            this.vidoInstance.destroyable = [];\n        }\n        update(props = {}) {\n            if (this.vidoInstance.debug) {\n                console.groupCollapsed(`component update method fired ${this.instance}`);\n                console.log(clone({ components: components.keys(), actionsByInstance }));\n                console.trace();\n                console.groupEnd();\n            }\n            return this.updateFunction(props);\n        }\n        change(changedProps, options = { leave: false }) {\n            const props = changedProps;\n            if (this.vidoInstance.debug) {\n                console.groupCollapsed(`component change method fired ${this.instance}`);\n                console.log(clone({\n                    props,\n                    components: components.keys(),\n                    onChangeFunctions: this.vidoInstance.onChangeFunctions,\n                    changedProps,\n                    actionsByInstance\n                }));\n                console.trace();\n                console.groupEnd();\n            }\n            for (const fn of this.vidoInstance.onChangeFunctions) {\n                fn(changedProps, options);\n            }\n        }\n    };\n}\n\n/**\n * Schedule - a throttle function that uses requestAnimationFrame to limit the rate at which a function is called.\n *\n * @param {function} fn\n * @returns {function}\n */\nfunction schedule(fn) {\n    let frameId = 0;\n    function wrapperFn(argument) {\n        if (frameId) {\n            return;\n        }\n        function executeFrame() {\n            frameId = 0;\n            fn.apply(undefined, [argument]);\n        }\n        frameId = requestAnimationFrame(executeFrame);\n    }\n    return wrapperFn;\n}\n/**\n * Is object - helper function to determine if specified variable is an object\n *\n * @param {any} item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\n * Merge deep - helper function which will merge objects recursively - creating brand new one - like clone\n *\n * @param {object} target\n * @params {object} sources\n * @returns {object}\n */\nfunction mergeDeep(target, ...sources) {\n    const source = sources.shift();\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (typeof target[key] === 'undefined') {\n                    target[key] = {};\n                }\n                target[key] = mergeDeep(target[key], source[key]);\n            }\n            else if (Array.isArray(source[key])) {\n                target[key] = [];\n                for (let item of source[key]) {\n                    if (isObject(item)) {\n                        target[key].push(mergeDeep({}, item));\n                        continue;\n                    }\n                    target[key].push(item);\n                }\n            }\n            else {\n                target[key] = source[key];\n            }\n        }\n    }\n    if (!sources.length) {\n        return target;\n    }\n    return mergeDeep(target, ...sources);\n}\n/**\n * Clone helper function\n *\n * @param source\n * @returns {object} cloned source\n */\nfunction clone(source) {\n    if (typeof source.actions !== 'undefined') {\n        const actns = source.actions.map((action) => {\n            const result = Object.assign({}, action);\n            const props = Object.assign({}, result.props);\n            delete props.state;\n            delete props.api;\n            delete result.element;\n            result.props = props;\n            return result;\n        });\n        source.actions = actns;\n    }\n    return mergeDeep({}, source);\n}\n\n/* dev imports\nimport { render, html, directive, svg, Part } from '../lit-html';\nimport { asyncAppend } from '../lit-html/directives/async-append';\nimport { asyncReplace } from '../lit-html/directives/async-replace';\nimport { cache } from '../lit-html/directives/cache';\nimport { classMap } from '../lit-html/directives/class-map';\nimport { guard } from '../lit-html/directives/guard';\nimport { ifDefined } from '../lit-html/directives/if-defined';\nimport { repeat } from '../lit-html/directives/repeat';\nimport { unsafeHTML } from '../lit-html/directives/unsafe-html';\nimport { until } from '../lit-html/directives/until';\nimport { Directive } from '../lit-html/lib/directive';\n*/\n/**\n * Vido library\n *\n * @param {any} state - state management for the view (can be anything)\n * @param {any} api - some api's or other globally available services\n * @returns {object} vido instance\n */\nfunction Vido(state, api) {\n    let componentId = 0;\n    const components = new Map();\n    let actionsByInstance = new Map();\n    let app, element;\n    let shouldUpdateCount = 0;\n    const resolved = Promise.resolve();\n    const additionalMethods = {};\n    const ActionsCollector = getActionsCollector(actionsByInstance);\n    class InstanceActionsCollector {\n        constructor(instance) {\n            this.instance = instance;\n        }\n        create(actions, props) {\n            const actionsInstance = new ActionsCollector(this.instance);\n            actionsInstance.set(actions, props);\n            return actionsInstance;\n        }\n    }\n    const PublicComponentMethods = getPublicComponentMethods(components, actionsByInstance, clone);\n    /**\n     * Create vido instance for component\n     */\n    function vido() {\n        this.destroyable = [];\n        this.onChangeFunctions = [];\n        this.debug = false;\n        this.state = state;\n        this.api = api;\n        this.lastProps = {};\n        this.reuseComponents = this.reuseComponents.bind(this);\n        this.onDestroy = this.onDestroy.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.update = this.update.bind(this);\n        for (const name in additionalMethods) {\n            this[name] = additionalMethods[name];\n        }\n    }\n    vido.prototype.html = html;\n    vido.prototype.svg = svg;\n    vido.prototype.directive = directive;\n    vido.prototype.asyncAppend = asyncAppend;\n    vido.prototype.asyncReplace = asyncReplace;\n    vido.prototype.cache = cache;\n    vido.prototype.classMap = classMap;\n    vido.prototype.guard = guard;\n    vido.prototype.ifDefined = ifDefined;\n    vido.prototype.repeat = repeat;\n    vido.prototype.unsafeHTML = unsafeHTML;\n    vido.prototype.until = until;\n    vido.prototype.schedule = schedule;\n    vido.prototype.actionsByInstance = (componentActions, props) => { };\n    vido.prototype.StyleMap = StyleMap;\n    vido.prototype.Detach = Detach;\n    vido.prototype.PointerAction = PointerAction;\n    vido.prototype.addMethod = function addMethod(name, body) {\n        additionalMethods[name] = body;\n    };\n    vido.prototype.Action = Action;\n    vido.prototype.onDestroy = function onDestroy(fn) {\n        this.destroyable.push(fn);\n    };\n    vido.prototype.onChange = function onChange(fn) {\n        this.onChangeFunctions.push(fn);\n    };\n    vido.prototype.update = function update() {\n        this.updateTemplate();\n    };\n    /**\n     * Reuse existing components when your data was changed\n     *\n     * @param {array} currentComponents - array of components\n     * @param {array} dataArray  - any data as array for each component\n     * @param {function} getProps - you can pass params to component from array item ( example: item=>({id:item.id}) )\n     * @param {function} component - what kind of components do you want to create?\n     * @param {boolean} leaveTail - leave last elements and do not destroy corresponding components\n     * @returns {array} of components (with updated/destroyed/created ones)\n     */\n    vido.prototype.reuseComponents = function reuseComponents(currentComponents, dataArray, getProps, component, leaveTail = true) {\n        const modified = [];\n        const currentLen = currentComponents.length;\n        const dataLen = dataArray.length;\n        let leave = false;\n        let leaveStartingAt = 0;\n        if (currentLen < dataLen) {\n            let diff = dataLen - currentLen;\n            while (diff) {\n                const item = dataArray[dataLen - diff];\n                const newComponent = this.createComponent(component, getProps(item));\n                currentComponents.push(newComponent);\n                modified.push(newComponent.instance);\n                diff--;\n            }\n        }\n        else if (currentLen > dataLen) {\n            let diff = currentLen - dataLen;\n            if (leaveTail) {\n                leave = true;\n                leaveStartingAt = currentLen - diff;\n            }\n            while (diff) {\n                const index = currentLen - diff;\n                if (!leaveTail) {\n                    modified.push(currentComponents[index].instance);\n                    currentComponents[index].destroy();\n                }\n                diff--;\n            }\n            if (!leaveTail) {\n                currentComponents.length = dataLen;\n            }\n        }\n        let index = 0;\n        for (const component of currentComponents) {\n            const item = dataArray[index];\n            if (!modified.includes(component.instance)) {\n                component.change(getProps(item), { leave: leave && index >= leaveStartingAt });\n            }\n            index++;\n        }\n        return currentComponents;\n    };\n    const InternalComponentMethods = getInternalComponentMethods(components, actionsByInstance, clone);\n    /**\n     * Create component\n     *\n     * @param {function} component\n     * @param {any} props\n     * @returns {object} component instance methods\n     */\n    vido.prototype.createComponent = function createComponent(component, props = {}) {\n        const instance = component.name + ':' + componentId++;\n        let vidoInstance;\n        vidoInstance = new vido();\n        vidoInstance.instance = instance;\n        vidoInstance.Actions = new InstanceActionsCollector(instance);\n        const publicMethods = new PublicComponentMethods(instance, vidoInstance, props);\n        const internalMethods = new InternalComponentMethods(instance, vidoInstance, component(vidoInstance, props));\n        components.set(instance, internalMethods);\n        components.get(instance).change(props);\n        if (vidoInstance.debug) {\n            console.groupCollapsed(`component created ${instance}`);\n            console.log(clone({ props, components: components.keys(), actionsByInstance }));\n            console.trace();\n            console.groupEnd();\n        }\n        return publicMethods;\n    };\n    /**\n     * Destroy component\n     *\n     * @param {string} instance\n     * @param {object} vidoInstance\n     */\n    vido.prototype.destroyComponent = function destroyComponent(instance, vidoInstance) {\n        if (vidoInstance.debug) {\n            console.groupCollapsed(`destroying component ${instance}...`);\n            console.log(clone({ components: components.keys(), actionsByInstance }));\n            console.trace();\n            console.groupEnd();\n        }\n        if (actionsByInstance.has(instance)) {\n            for (const action of actionsByInstance.get(instance)) {\n                if (typeof action.componentAction.destroy === 'function') {\n                    action.componentAction.destroy(action.element, action.props);\n                }\n            }\n        }\n        actionsByInstance.delete(instance);\n        components.get(instance).destroy();\n        components.delete(instance);\n        if (vidoInstance.debug) {\n            console.groupCollapsed(`component destroyed ${instance}`);\n            console.log(clone({ components: components.keys(), actionsByInstance }));\n            console.trace();\n            console.groupEnd();\n        }\n    };\n    /**\n     * Update template - trigger render proccess\n     * @param {object} vidoInstance\n     */\n    vido.prototype.updateTemplate = function updateTemplate() {\n        const currentShouldUpdateCount = ++shouldUpdateCount;\n        const self = this;\n        function flush() {\n            if (currentShouldUpdateCount === shouldUpdateCount) {\n                shouldUpdateCount = 0;\n                self.render();\n            }\n        }\n        resolved.then(flush);\n    };\n    /**\n     * Create app\n     *\n     * @param config\n     * @returns {object} component instance methods\n     */\n    vido.prototype.createApp = function createApp(config) {\n        element = config.element;\n        const App = this.createComponent(config.component, config.props);\n        app = App.instance;\n        this.render();\n        return App;\n    };\n    /**\n     * Execute actions\n     */\n    vido.prototype.executeActions = function executeActions() {\n        var _a, _b, _c;\n        for (const actions of actionsByInstance.values()) {\n            for (const action of actions) {\n                if (action.element.vido === undefined) {\n                    const componentAction = action.componentAction;\n                    const create = componentAction.create;\n                    if (typeof create !== 'undefined') {\n                        let result;\n                        if (((_a = create.prototype) === null || _a === void 0 ? void 0 : _a.isAction) !== true &&\n                            create.isAction === undefined &&\n                            ((_b = create.prototype) === null || _b === void 0 ? void 0 : _b.update) === undefined &&\n                            ((_c = create.prototype) === null || _c === void 0 ? void 0 : _c.destroy) === undefined) {\n                            result = create(action.element, action.props);\n                        }\n                        else {\n                            result = new create(action.element, action.props);\n                        }\n                        if (result !== undefined) {\n                            if (typeof result === 'function') {\n                                componentAction.destroy = result;\n                            }\n                            else {\n                                if (typeof result.update === 'function') {\n                                    componentAction.update = result.update.bind(result);\n                                }\n                                if (typeof result.destroy === 'function') {\n                                    componentAction.destroy = result.destroy.bind(result);\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    action.element.vido = action.props;\n                    if (typeof action.componentAction.update === 'function') {\n                        action.componentAction.update(action.element, action.props);\n                    }\n                }\n            }\n            for (const action of actions) {\n                action.element.vido = action.props;\n            }\n        }\n    };\n    /**\n     * Render view\n     */\n    vido.prototype.render = function renderView() {\n        render(components.get(app).update(), element);\n        this.executeActions();\n    };\n    return new vido();\n}\n\nexport default Vido;\nexport { Action, Detach, Directive, PointerAction, StyleMap, asyncAppend, asyncReplace, cache, classMap, guard, ifDefined, litHtml as lithtml, repeat, schedule, unsafeHTML, until };\n//# sourceMappingURL=vido.esm.js.map\n","import ItemHold from './ItemHold.plugin';\nimport ItemMovement from './ItemMovement.plugin';\nimport SaveAsImage from './SaveAsImage.plugin';\nimport Selection from './Selection.plugin';\nimport CalendarScroll from './CalendarScroll.plugin';\n\nexport default { ItemHold, ItemMovement, SaveAsImage, Selection, CalendarScroll };\n","/**\n * ItemHold plugin\n *\n * @copyright Rafal Pospiech <https://neuronet.io>\n * @author    Rafal Pospiech <neuronet.io@gmail.com>\n * @package   gantt-schedule-timeline-calendar\n * @license   GPL-3.0 (https://github.com/neuronetio/gantt-schedule-timeline-calendar/blob/master/LICENSE)\n * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar\n */\n\nexport interface Options {\n  time?: number;\n  movementThreshold?: number;\n  action?: (element: HTMLElement, data: any) => void;\n}\n\nexport default function ItemHold(options: Options = {}) {\n  let api;\n  const defaultOptions = {\n    time: 1000,\n    movementThreshold: 2,\n    action(element, data) {}\n  };\n  options = { ...defaultOptions, ...options };\n\n  const holding = {};\n  const pointer = { x: 0, y: 0 };\n\n  function onPointerDown(item, element, event) {\n    if (typeof holding[item.id] === 'undefined') {\n      const normalized = api.normalizePointerEvent(event);\n      holding[item.id] = { x: normalized.x, y: normalized.y };\n      event.stopPropagation();\n      event.preventDefault();\n      setTimeout(() => {\n        if (typeof holding[item.id] !== 'undefined') {\n          let exec = true;\n          const xMovement = Math.abs(holding[item.id].x - pointer.x);\n          const yMovement = Math.abs(holding[item.id].y - pointer.y);\n          if (xMovement > options.movementThreshold) {\n            exec = false;\n          }\n          if (yMovement > options.movementThreshold) {\n            exec = false;\n          }\n          delete holding[item.id];\n          if (exec) {\n            options.action(element, item);\n          }\n        }\n      }, options.time);\n    }\n  }\n\n  function onPointerUp(itemId) {\n    if (typeof holding[itemId] !== 'undefined') {\n      delete holding[itemId];\n    }\n  }\n\n  function action(element, data) {\n    function elementPointerDown(event) {\n      onPointerDown(data.item, element, event);\n    }\n    element.addEventListener('mousedown', elementPointerDown);\n    element.addEventListener('touchstart', elementPointerDown);\n    function pointerUp() {\n      onPointerUp(data.item.id);\n    }\n\n    document.addEventListener('mouseup', pointerUp);\n    document.addEventListener('touchend', pointerUp);\n    function onPointerMove(event) {\n      const normalized = api.normalizePointerEvent(event);\n      pointer.x = normalized.x;\n      pointer.y = normalized.y;\n    }\n\n    document.addEventListener('mousemove', onPointerMove);\n    document.addEventListener('touchmove', onPointerMove);\n    return {\n      update(element, changedData) {\n        data = changedData;\n      },\n      destroy(element, data) {\n        document.removeEventListener('mouseup', onPointerUp);\n        document.removeEventListener('mousemove', onPointerMove);\n        element.removeEventListener('mousedown', elementPointerDown);\n        document.removeEventListener('touchend', onPointerUp);\n        document.removeEventListener('touchmove', onPointerMove);\n        element.removeEventListener('touchstart', elementPointerDown);\n      }\n    };\n  }\n\n  return function initialize(vido) {\n    api = vido.api;\n    vido.state.update('config.actions.chart-timeline-items-row-item', actions => {\n      actions.push(action);\n      return actions;\n    });\n  };\n}\n","/**\n * ItemMovement plugin\n *\n * @copyright Rafal Pospiech <https://neuronet.io>\n * @author    Rafal Pospiech <neuronet.io@gmail.com>\n * @package   gantt-schedule-timeline-calendar\n * @license   GPL-3.0 (https://github.com/neuronetio/gantt-schedule-timeline-calendar/blob/master/LICENSE)\n * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar\n */\n\nexport interface Options {\n  moveable?: boolean | string;\n  resizeable?: boolean | string;\n  resizerContent?: string;\n  collisionDetection?: boolean;\n  outOfBorders?: boolean;\n  snapStart?: (timeStart: number, startDiff: number, item: object) => number;\n  snapEnd?: (timeEnd: number, endDiff: number, item: object) => number;\n  ghostNode?: boolean;\n}\n\nexport default function ItemMovement(options: Options = {}) {\n  const defaultOptions = {\n    moveable: true,\n    resizeable: true,\n    resizerContent: '',\n    collisionDetection: true,\n    outOfBorders: false,\n    snapStart(timeStart, startDiff) {\n      return timeStart + startDiff;\n    },\n    snapEnd(timeEnd, endDiff) {\n      return timeEnd + endDiff;\n    },\n    ghostNode: true\n  };\n  options = { ...defaultOptions, ...options };\n\n  const movementState = {};\n\n  /**\n   * Add moving functionality to items as action\n   *\n   * @param {HTMLElement} node DOM Node\n   * @param {Object} data\n   */\n  function action(element: HTMLElement, data) {\n    if (!options.moveable && !options.resizeable) {\n      return;\n    }\n    let state;\n    let api;\n\n    function isMoveable(data) {\n      let moveable = options.moveable;\n      if (data.item.hasOwnProperty('moveable') && moveable) {\n        moveable = data.item.moveable;\n      }\n      if (data.row.hasOwnProperty('moveable') && moveable) {\n        moveable = data.row.moveable;\n      }\n      return moveable;\n    }\n\n    function isResizeable(data) {\n      let resizeable = options.resizeable && (!data.item.hasOwnProperty('resizeable') || data.item.resizeable === true);\n      if (data.row.hasOwnProperty('resizeable') && resizeable) {\n        resizeable = data.row.resizeable;\n      }\n      return resizeable;\n    }\n\n    function getMovement(data) {\n      const itemId = data.item.id;\n      if (typeof movementState[itemId] === 'undefined') {\n        movementState[itemId] = { moving: false, resizing: false };\n      }\n      return movementState[itemId];\n    }\n\n    function createGhost(data, ev, ganttLeft, ganttTop) {\n      const movement = getMovement(data);\n      if (!options.ghostNode || typeof movement.ghost !== 'undefined') {\n        return;\n      }\n      const ghost = element.cloneNode(true) as HTMLElement;\n      const style = getComputedStyle(element);\n      const compensation = state.get('config.scroll.compensation');\n      ghost.style.position = 'absolute';\n      ghost.style.left = ev.x - ganttLeft - movement.itemLeftCompensation + 'px';\n      const itemTop = ev.y - ganttTop - element.offsetTop - compensation + parseInt(style['margin-top']);\n      movement.itemTop = itemTop;\n      ghost.style.top = ev.y - ganttTop - itemTop + 'px';\n      ghost.style.width = style.width;\n      ghost.style['box-shadow'] = '10px 10px 6px #00000020';\n      const height = element.clientHeight + 'px';\n      ghost.style.height = height;\n      ghost.style['line-height'] = element.clientHeight - 18 + 'px';\n      ghost.style.opacity = '0.6';\n      ghost.style.transform = 'scale(1.05, 1.05)';\n      state.get('_internal.elements.chart-timeline').appendChild(ghost);\n      movement.ghost = ghost;\n      return ghost;\n    }\n\n    function moveGhost(data, ev) {\n      if (options.ghostNode) {\n        const movement = getMovement(data);\n        const left = ev.x - movement.ganttLeft - movement.itemLeftCompensation;\n        movement.ghost.style.left = left + 'px';\n        movement.ghost.style.top =\n          ev.y - movement.ganttTop - movement.itemTop + parseInt(getComputedStyle(element)['margin-top']) + 'px';\n      }\n    }\n\n    function destroyGhost(itemId) {\n      if (!options.ghostNode) {\n        return;\n      }\n      if (typeof movementState[itemId] !== 'undefined' && typeof movementState[itemId].ghost !== 'undefined') {\n        state.get('_internal.elements.chart-timeline').removeChild(movementState[itemId].ghost);\n        delete movementState[itemId].ghost;\n      }\n    }\n\n    function getSnapStart(data) {\n      let snapStart = options.snapStart;\n      if (typeof data.item.snapStart === 'function') {\n        snapStart = data.item.snapStart;\n      }\n      return snapStart;\n    }\n\n    function getSnapEnd(data) {\n      let snapEnd = options.snapEnd;\n      if (typeof data.item.snapEnd === 'function') {\n        snapEnd = data.item.snapEnd;\n      }\n      return snapEnd;\n    }\n\n    state = data.state;\n    api = data.api;\n\n    const resizerHTML = `<div class=\"${api.getClass('chart-timeline-items-row-item-resizer')}\">${\n      options.resizerContent\n    }</div>`;\n    // @ts-ignore\n    element.insertAdjacentHTML('beforeend', resizerHTML);\n    const resizerEl = element.querySelector(\n      '.gantt-schedule-timeline-calendar__chart-timeline-items-row-item-resizer'\n    ) as HTMLElement;\n    if (!isResizeable(data)) {\n      resizerEl.style.visibility = 'hidden';\n    } else {\n      resizerEl.style.visibility = 'visible';\n    }\n\n    function labelMouseDown(ev) {\n      ev.stopPropagation();\n      if (ev.button !== 0) {\n        return;\n      }\n      const movement = getMovement(data);\n      movement.moving = true;\n      const item = state.get(`config.chart.items.${data.item.id}`);\n      const chartLeftTime = state.get('_internal.chart.time.leftGlobal');\n      const timePerPixel = state.get('_internal.chart.time.timePerPixel');\n      const ganttRect = state.get('_internal.elements.chart-timeline').getBoundingClientRect();\n      movement.ganttTop = ganttRect.top;\n      movement.ganttLeft = ganttRect.left;\n      movement.itemX = Math.round((item.time.start - chartLeftTime) / timePerPixel);\n      movement.itemLeftCompensation = ev.x - movement.ganttLeft - movement.itemX;\n      createGhost(data, ev, ganttRect.left, ganttRect.top);\n    }\n\n    function resizerMouseDown(ev) {\n      ev.stopPropagation();\n      if (ev.button !== 0) {\n        return;\n      }\n      const movement = getMovement(data);\n      movement.resizing = true;\n      const item = state.get(`config.chart.items.${data.item.id}`);\n      const chartLeftTime = state.get('_internal.chart.time.leftGlobal');\n      const timePerPixel = state.get('_internal.chart.time.timePerPixel');\n      const ganttRect = state.get('_internal.elements.chart-timeline').getBoundingClientRect();\n      movement.ganttTop = ganttRect.top;\n      movement.ganttLeft = ganttRect.left;\n      movement.itemX = (item.time.end - chartLeftTime) / timePerPixel;\n      movement.itemLeftCompensation = ev.x - movement.ganttLeft - movement.itemX;\n    }\n\n    function isCollision(rowId, itemId, start, end) {\n      if (!options.collisionDetection) {\n        return false;\n      }\n      const time = state.get('_internal.chart.time');\n      if (options.outOfBorders && (start < time.from || end > time.to)) {\n        return true;\n      }\n      let diff = api.time.date(end).diff(start, 'milliseconds');\n      if (Math.sign(diff) === -1) {\n        diff = -diff;\n      }\n      if (diff <= 1) {\n        return true;\n      }\n      const row = state.get('config.list.rows.' + rowId);\n      for (const rowItem of row._internal.items) {\n        if (rowItem.id !== itemId) {\n          if (start >= rowItem.time.start && start <= rowItem.time.end) {\n            return true;\n          }\n          if (end >= rowItem.time.start && end <= rowItem.time.end) {\n            return true;\n          }\n          if (start <= rowItem.time.start && end >= rowItem.time.end) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    function movementX(ev, row, item, zoom, timePerPixel) {\n      const movement = getMovement(data);\n      const left = ev.x - movement.ganttLeft - movement.itemLeftCompensation;\n      moveGhost(data, ev);\n      const leftMs = state.get('_internal.chart.time.leftGlobal') + left * timePerPixel;\n      const add = leftMs - item.time.start;\n      const originalStart = item.time.start;\n      const finalStartTime = getSnapStart(data)(item.time.start, add, item);\n      const finalAdd = finalStartTime - originalStart;\n      const collision = isCollision(row.id, item.id, item.time.start + finalAdd, item.time.end + finalAdd);\n      if (finalAdd && !collision) {\n        state.update(`config.chart.items.${data.item.id}.time`, function moveItem(time) {\n          time.start += finalAdd;\n          time.end = getSnapEnd(data)(time.end, finalAdd, item) - 1;\n          return time;\n        });\n      }\n    }\n\n    function resizeX(ev, row, item, zoom, timePerPixel) {\n      if (!isResizeable(data)) {\n        return;\n      }\n      const time = state.get('_internal.chart.time');\n      const movement = getMovement(data);\n      const left = ev.x - movement.ganttLeft - movement.itemLeftCompensation;\n      const leftMs = time.leftGlobal + left * timePerPixel;\n      const add = leftMs - item.time.end;\n      if (item.time.end + add < item.time.start) {\n        return;\n      }\n      const originalEnd = item.time.end;\n      const finalEndTime = getSnapEnd(data)(item.time.end, add, item) - 1;\n      const finalAdd = finalEndTime - originalEnd;\n      const collision = isCollision(row.id, item.id, item.time.start, item.time.end + finalAdd);\n      if (finalAdd && !collision) {\n        state.update(`config.chart.items.${data.item.id}.time`, time => {\n          time.start = getSnapStart(data)(time.start, 0, item);\n          time.end = getSnapEnd(data)(time.end, finalAdd, item) - 1;\n          return time;\n        });\n      }\n    }\n\n    function movementY(ev, row, item, zoom, timePerPixel) {\n      moveGhost(data, ev);\n      const movement = getMovement(data);\n      const top = ev.y - movement.ganttTop;\n      const visibleRows = state.get('_internal.list.visibleRows');\n      const compensation = state.get('config.scroll.compensation');\n      let index = 0;\n      for (const currentRow of visibleRows) {\n        if (currentRow.top + compensation > top) {\n          if (index > 0) {\n            return index - 1;\n          }\n          return 0;\n        }\n        index++;\n      }\n      return index;\n    }\n\n    function documentMouseMove(ev) {\n      const movement = getMovement(data);\n      let item, rowId, row, zoom, timePerPixel;\n      if (movement.moving || movement.resizing) {\n        item = state.get(`config.chart.items.${data.item.id}`);\n        rowId = state.get(`config.chart.items.${data.item.id}.rowId`);\n        row = state.get(`config.list.rows.${rowId}`);\n        zoom = state.get('config.chart.time.zoom');\n        timePerPixel = state.get('_internal.chart.time.timePerPixel');\n      }\n      const moveable = isMoveable(data);\n      if (movement.moving) {\n        if (moveable === true || moveable === 'x' || (Array.isArray(moveable) && moveable.includes(rowId))) {\n          movementX(ev, row, item, zoom, timePerPixel);\n        }\n        if (!moveable || moveable === 'x') {\n          return;\n        }\n        let visibleRowsIndex = movementY(ev, row, item, zoom, timePerPixel);\n        const visibleRows = state.get('_internal.list.visibleRows');\n        if (typeof visibleRows[visibleRowsIndex] === 'undefined') {\n          if (visibleRowsIndex > 0) {\n            visibleRowsIndex = visibleRows.length - 1;\n          } else if (visibleRowsIndex < 0) {\n            visibleRowsIndex = 0;\n          }\n        }\n        const newRow = visibleRows[visibleRowsIndex];\n        const newRowId = newRow.id;\n        const collision = isCollision(newRowId, item.id, item.time.start, item.time.end);\n        if (newRowId !== item.rowId && !collision) {\n          if (!Array.isArray(moveable) || moveable.includes(newRowId)) {\n            if (!newRow.hasOwnProperty('moveable') || newRow.moveable) {\n              state.update(`config.chart.items.${item.id}.rowId`, newRowId);\n            }\n          }\n        }\n      } else if (movement.resizing && (typeof item.resizeable === 'undefined' || item.resizeable === true)) {\n        resizeX(ev, row, item, zoom, timePerPixel);\n      }\n    }\n\n    function documentMouseUp(ev) {\n      const movement = getMovement(data);\n      if (movement.moving || movement.resizing) {\n        ev.stopPropagation();\n      }\n      movement.moving = false;\n      movement.resizing = false;\n      for (const itemId in movementState) {\n        movementState[itemId].moving = false;\n        movementState[itemId].resizing = false;\n        destroyGhost(itemId);\n      }\n    }\n    element.addEventListener('mousedown', labelMouseDown);\n    resizerEl.addEventListener('mousedown', resizerMouseDown, { capture: true });\n    document.addEventListener('mousemove', documentMouseMove, { capture: true, passive: true });\n    document.addEventListener('mouseup', documentMouseUp, { capture: true, passive: true });\n\n    return {\n      update(node, changedData) {\n        if (!isResizeable(data) && resizerEl.style.visibility === 'visible') {\n          resizerEl.style.visibility = 'hidden';\n        } else if (isResizeable(data) && resizerEl.style.visibility === 'hidden') {\n          resizerEl.style.visibility = 'visible';\n        }\n      },\n      destroy(node, data) {\n        element.removeEventListener('mousedown', labelMouseDown);\n        resizerEl.removeEventListener('mousedown', resizerMouseDown);\n        document.removeEventListener('mousemove', documentMouseMove);\n        document.removeEventListener('mouseup', documentMouseUp);\n        resizerEl.remove();\n      }\n    };\n  }\n\n  return function initialize(vido) {\n    vido.state.update('config.actions.chart-timeline-items-row-item', actions => {\n      actions.push(action);\n      return actions;\n    });\n  };\n}\n","/**\n * SaveAsImage plugin\n *\n * @copyright Rafal Pospiech <https://neuronet.io>\n * @author    Rafal Pospiech <neuronet.io@gmail.com>\n * @package   gantt-schedule-timeline-calendar\n * @license   GPL-3.0 (https://github.com/neuronetio/gantt-schedule-timeline-calendar/blob/master/LICENSE)\n * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar\n */\n\n// @ts-nocheck\nexport default function SaveAsImage(options = {}) {\n  const defaultOptions = {\n    style: 'font-family: sans-serif;',\n    filename: 'gantt-schedule-timeline-calendar.jpeg'\n  };\n  options = { ...defaultOptions, options };\n  function downloadImage(data, filename) {\n    const a = document.createElement('a');\n    a.href = data;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n  }\n\n  function saveAsImage(ev) {\n    const element = ev.target;\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n    const html = unescape(encodeURIComponent(element.outerHTML));\n    let style = '';\n    for (const styleSheet of document.styleSheets) {\n      if (styleSheet.title === 'gstc') {\n        for (const rule of styleSheet.rules) {\n          style += rule.cssText;\n        }\n      }\n    }\n    style = `<style>* {${options.style}} ${style}</style>`;\n    const svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\">\n      <foreignObject x=\"0\" y=\"0\" width=\"${width}\" height=\"${height}\">\n        <div xmlns=\"http://www.w3.org/1999/xhtml\">\n          ${style}\n          ${html}\n        </div>\n      </foreignObject>\n    </svg>`;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n    const svg64 = 'data:image/svg+xml;base64,' + btoa(svg);\n    const img = new Image();\n    img.onload = function onLoad() {\n      ctx.drawImage(img, 0, 0);\n      const jpeg = canvas.toDataURL('image/jpeg', 1.0);\n      downloadImage(jpeg, options.filename);\n    };\n    img.src = svg64;\n  }\n\n  return function initialize(vido) {\n    vido.state.subscribe('_internal.elements.main', main => {\n      if (main) {\n        main.addEventListener('save-as-image', saveAsImage);\n      }\n    });\n  };\n}\n","/**\n * Selection plugin\n *\n * @copyright Rafal Pospiech <https://neuronet.io>\n * @author    Rafal Pospiech <neuronet.io@gmail.com>\n * @package   gantt-schedule-timeline-calendar\n * @license   GPL-3.0 (https://github.com/neuronetio/gantt-schedule-timeline-calendar/blob/master/LICENSE)\n * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar\n */\n\nimport { Action } from '@neuronet.io/vido';\n\nexport interface RectStyle {\n  [key: string]: any;\n}\n\nexport interface Options {\n  grid?: boolean;\n  items?: boolean;\n  rows?: boolean;\n  horizontal?: boolean;\n  vertical?: boolean;\n  rectStyle?: RectStyle;\n  selecting?: (data, type: string) => void;\n  deselecting?: (data, type: string) => void;\n  selected?: (data, type) => void;\n  deselected?: (data, type) => void;\n  canSelect?: (type, state, all) => any[];\n  canDeselect?: (type, state, all) => any[];\n  getApi?: (api: any) => void;\n}\n\nexport interface Items {\n  [key: string]: string[];\n}\n\ninterface SelectingData {\n  fromX?: number;\n  fromY?: number;\n  toX?: number;\n  toY?: number;\n  startX?: number;\n  startY?: number;\n  startCell?: any;\n  selecting?: boolean;\n  selected?: Items;\n}\n\nexport interface SelectState {\n  selecting?: Items;\n  selected?: Items;\n}\n\nexport default function Selection(options: Options = {}) {\n  let vido, state, api, schedule;\n  const path = 'config.plugin.selection';\n  const rectClassName = 'gantt-schedule-timeline-caledar__plugin-selection-rect';\n  const rect = document.createElement('div');\n  rect.classList.add(rectClassName);\n  rect.style.visibility = 'hidden';\n  rect.style.left = '0px';\n  rect.style.top = '0px';\n  rect.style.width = '0px';\n  rect.style.height = '0px';\n  rect.style.background = 'rgba(0, 119, 192, 0.2)';\n  rect.style.border = '2px dashed rgba(0, 119, 192, 0.75)';\n  rect.style.position = 'absolute';\n  rect.style['user-select'] = 'none';\n  rect.style['pointer-events'] = 'none';\n\n  const defaultOptions: Options = {\n    grid: false,\n    items: true,\n    rows: false,\n    horizontal: true,\n    vertical: true,\n    rectStyle: {},\n    selecting() {},\n    deselecting() {},\n    selected() {},\n    deselected() {},\n    canSelect(type, currently, all) {\n      return currently;\n    },\n    canDeselect(type, currently, all) {\n      return [];\n    },\n    getApi() {}\n  };\n  options = { ...defaultOptions, ...options } as Options;\n  for (const styleProp in options.rectStyle) {\n    rect.style[styleProp] = options.rectStyle[styleProp];\n  }\n  let selecting: SelectingData = {\n    fromX: -1,\n    fromY: -1,\n    toX: -1,\n    toY: -1,\n    startX: -1,\n    startY: -1,\n    startCell: false,\n    selecting: false\n  };\n  const selectionTypesIdGetters = {\n    'chart-timeline-grid-row': props => props.row.id,\n    'chart-timeline-grid-row-block': props => props.id,\n    'chart-timeline-items-row': props => props.row.id,\n    'chart-timeline-items-row-item': props => props.item.id\n  };\n\n  /**\n   * Selection action class\n   */\n  class SelectionAction extends Action {\n    chartTimeline: Element;\n    mouseDown: (ev: MouseEvent) => void;\n    mouseMove: (ev: MouseEvent) => void;\n    mouseUp: (ev: MouseEvent) => void;\n    left: number;\n    top: number;\n    unsub: () => void;\n\n    /**\n     * Selection action constructor\n     * @param {Element} element\n     * @param {object|any} data\n     */\n    constructor(element: Element, data: any) {\n      super();\n      let previousSelect,\n        api = {} as any;\n      this.unsub = data.state.subscribeAll(\n        ['_internal.elements.chart-timeline', '_internal.chart.dimensions.width'],\n        bulk => {\n          const chartTimeline = state.get('_internal.elements.chart-timeline');\n          if (chartTimeline === undefined) return;\n          this.chartTimeline = chartTimeline;\n          if (!this.chartTimeline.querySelector('.' + rectClassName)) {\n            this.chartTimeline.insertAdjacentElement('beforeend', rect);\n          }\n          const bounding = this.chartTimeline.getBoundingClientRect();\n          this.left = bounding.left;\n          this.top = bounding.top;\n        }\n      );\n\n      /**\n       * Clear selection\n       * @param {boolean} force\n       */\n      function clearSelection(force: boolean = false) {\n        let selectingState;\n        state.update(path, currently => {\n          selectingState = {\n            selecting: {\n              'chart-timeline-grid-rows': [],\n              'chart-timeline-grid-row-blocks': [],\n              'chart-timeline-items-rows': [],\n              'chart-timeline-items-row-items': []\n            },\n            selected: {\n              'chart-timeline-grid-rows': force\n                ? []\n                : options.canDeselect(\n                    'chart-timeline-grid-rows',\n                    currently.selected['chart-timeline-grid-rows'],\n                    currently\n                  ),\n              'chart-timeline-grid-row-blocks': force\n                ? []\n                : options.canDeselect(\n                    'chart-timeline-grid-row-blocks',\n                    currently.selected['chart-timeline-grid-row-blocks'],\n                    currently\n                  ),\n              'chart-timeline-items-rows': force\n                ? []\n                : options.canDeselect(\n                    'chart-timeline-items-rows',\n                    currently.selected['chart-timeline-items-rows'],\n                    currently\n                  ),\n              'chart-timeline-items-row-items': force\n                ? []\n                : options.canDeselect(\n                    'chart-timeline-items-rows',\n                    currently.selected['chart-timeline-items-rows'],\n                    currently\n                  )\n            }\n          };\n          return selectingState;\n        });\n        state.update('_internal.chart.grid.rowsWithBlocks', function clearRowsWithBlocks(rowsWithBlocks) {\n          for (const row of rowsWithBlocks) {\n            for (const block of row.blocks) {\n              block.selected = selectingState.selected['chart-timeline-grid-row-blocks'].includes(block.id);\n              block.selecting = false;\n            }\n          }\n          return rowsWithBlocks;\n        });\n      }\n      api.clearSelection = clearSelection;\n\n      /**\n       * Clone current selection state\n       * @param {object} currentSelect\n       * @returns {object} currentSelect cloned\n       */\n      function cloneSelection(currentSelect) {\n        const result: SelectingData = {};\n        result.selecting = { ...currentSelect.selecting };\n        result.selecting['chart-timeline-grid-rows'] = currentSelect.selecting['chart-timeline-grid-rows'].slice();\n        result.selecting['chart-timeline-grid-row-blocks'] = currentSelect.selecting[\n          'chart-timeline-grid-row-blocks'\n        ].slice();\n        result.selecting['chart-timeline-items-rows'] = currentSelect.selecting['chart-timeline-items-rows'].slice();\n        result.selecting['chart-timeline-items-row-items'] = currentSelect.selecting[\n          'chart-timeline-items-row-items'\n        ].slice();\n        result.selected = { ...currentSelect.selected };\n        result.selected['chart-timeline-grid-rows'] = currentSelect.selected['chart-timeline-grid-rows'].slice();\n        result.selected['chart-timeline-grid-row-blocks'] = currentSelect.selected[\n          'chart-timeline-grid-row-blocks'\n        ].slice();\n        result.selected['chart-timeline-items-rows'] = currentSelect.selected['chart-timeline-items-rows'].slice();\n        result.selected['chart-timeline-items-row-items'] = currentSelect.selected[\n          'chart-timeline-items-row-items'\n        ].slice();\n        return result;\n      }\n\n      /**\n       * Save and swap coordinates if needed\n       * @param {MouseEvent} ev\n       */\n      const saveAndSwapIfNeeded = (ev: MouseEvent) => {\n        const currentX = ev.x - this.left;\n        const currentY = ev.y - this.top;\n        if (currentX <= selecting.startX) {\n          selecting.fromX = currentX;\n          selecting.toX = selecting.startX;\n        } else {\n          selecting.fromX = selecting.startX;\n          selecting.toX = currentX;\n        }\n        if (currentY <= selecting.startY) {\n          selecting.fromY = currentY;\n          selecting.toY = selecting.startY;\n        } else {\n          selecting.fromY = selecting.startY;\n          selecting.toY = currentY;\n        }\n      };\n\n      /**\n       * Is rectangle inside other rectangle ?\n       * @param {DOMRect} boundingRect\n       * @param {DOMRect} rectBoundingRect\n       * @returns {boolean}\n       */\n      const isInside = (boundingRect: DOMRect, rectBoundingRect: DOMRect) => {\n        let horizontal = false;\n        let vertical = false;\n        if (\n          (boundingRect.left > rectBoundingRect.left && boundingRect.left < rectBoundingRect.right) ||\n          (boundingRect.right > rectBoundingRect.left && boundingRect.right < rectBoundingRect.right) ||\n          (boundingRect.left <= rectBoundingRect.left && boundingRect.right >= rectBoundingRect.right)\n        ) {\n          horizontal = true;\n        }\n        if (\n          (boundingRect.top > rectBoundingRect.top && boundingRect.top < rectBoundingRect.bottom) ||\n          (boundingRect.bottom > rectBoundingRect.top && boundingRect.bottom < rectBoundingRect.bottom) ||\n          (boundingRect.top <= rectBoundingRect.top && boundingRect.bottom >= rectBoundingRect.bottom)\n        ) {\n          vertical = true;\n        }\n        return horizontal && vertical;\n      };\n\n      /**\n       * Get selecting elements\n       * @param {DOMRect} rectBoundingRect\n       * @param {Element[]} elements\n       * @param {string} type\n       * @returns {string[]}\n       */\n      const getSelecting = (rectBoundingRect: DOMRect, elements: Element[], type: string, getId: (any) => string) => {\n        const selectingResult = [];\n        const currentlySelectingData = [];\n        const all = elements[type + 's'];\n        const currentAll = state.get(path);\n        const currentSelecting = currentAll.selecting[type + 's'];\n        for (const element of all) {\n          const boundingRect = element.getBoundingClientRect();\n          if (isInside(boundingRect, rectBoundingRect)) {\n            currentlySelectingData.push(element.vido);\n            const canSelect = options.canSelect(type, currentlySelectingData, currentAll);\n            if (canSelect.includes(element.vido)) {\n              if (!currentSelecting.includes(getId(element.vido))) {\n                options.selecting(element.vido, type);\n              }\n              selectingResult.push(getId(element.vido));\n            } else {\n              currentlySelectingData.unshift();\n            }\n          } else {\n            if (currentSelecting.includes(getId(element.vido))) {\n              options.deselecting(element.vido, type);\n            }\n          }\n        }\n        return selectingResult;\n      };\n\n      /**\n       * Select\n       * @param {Event} ev\n       */\n      const select = ev => {\n        if (!selecting.selecting) {\n          return;\n        }\n        clearSelection();\n        saveAndSwapIfNeeded(ev);\n        rect.style.left = selecting.fromX + 'px';\n        rect.style.top = selecting.fromY + 'px';\n        rect.style.visibility = 'visible';\n        rect.style.width = selecting.toX - selecting.fromX + 'px';\n        rect.style.height = selecting.toY - selecting.fromY + 'px';\n        const rectBoundingRect = rect.getBoundingClientRect();\n        const elements = state.get('_internal.elements');\n        const nowSelecting = {};\n        for (const type in selectionTypesIdGetters) {\n          nowSelecting[type + 's'] = getSelecting(rectBoundingRect, elements, type, selectionTypesIdGetters[type]);\n        }\n\n        state.update(`${path}.selecting`, nowSelecting);\n\n        state.update(\n          'config.chart.items',\n          function updateItems(items) {\n            const now = nowSelecting['chart-timeline-items-row-items'];\n            for (const itemId in items) {\n              const item = items[itemId];\n              if (now.includes(item.id)) {\n                item.selecting = true;\n              } else {\n                item.selecting = false;\n              }\n            }\n            return items;\n          },\n          { only: ['selecting'] }\n        );\n\n        state.update('_internal.chart.grid.rowsWithBlocks', function updateRowsWithBlocks(rowsWithBlocks) {\n          const nowBlocks = nowSelecting['chart-timeline-grid-row-blocks'];\n          const nowRows = nowSelecting['chart-timeline-grid-rows'];\n          for (const row of rowsWithBlocks) {\n            if (nowRows.includes(row.id)) {\n              row.selecting = true;\n            } else {\n              row.selecting = false;\n            }\n            for (const block of row.blocks) {\n              if (nowBlocks.includes(block.id)) {\n                block.selecting = true;\n              } else {\n                block.selecting = false;\n              }\n            }\n          }\n          return rowsWithBlocks;\n        });\n      };\n\n      /**\n       * End select\n       * @param {Event} ev\n       */\n      const endSelect = ev => {\n        if (selecting.selecting) {\n          ev.stopPropagation();\n          if (selecting.fromX === ev.x - this.left && selecting.fromY === ev.y - this.top) {\n            selecting.selecting = false;\n            rect.style.visibility = 'hidden';\n            return;\n          }\n        } else {\n          clearSelection();\n          return;\n        }\n\n        selecting.selecting = false;\n        rect.style.visibility = 'hidden';\n        const currentSelect = state.get(path);\n        const select: SelectState = {};\n        state.update(path, value => {\n          select.selected = { ...value.selecting };\n          select.selecting = {\n            'chart-timeline-grid-rows': [],\n            'chart-timeline-grid-row-blocks': [],\n            'chart-timeline-items-rows': [],\n            'chart-timeline-items-row-items': []\n          } as Items;\n          return select;\n        });\n        const elements = state.get('_internal.elements');\n        for (const type in selectionTypesIdGetters) {\n          for (const element of elements[type + 's']) {\n            if (currentSelect.selecting[type + 's'].includes(element.vido.id)) {\n              options.deselecting(element.vido, type);\n            }\n          }\n        }\n        state.update('config.chart.items', function updateItems(items) {\n          const now = currentSelect.selecting['chart-timeline-items-row-items'];\n          for (const itemId in items) {\n            const item = items[itemId];\n            if (now.includes(item.id)) {\n              item.selecting = true;\n            } else {\n              item.selecting = false;\n            }\n          }\n          return items;\n        });\n        state.update('_internal.chart.grid.rowsWithBlocks', function updateRowsWithBlocks(rowsWithBlocks) {\n          for (const row of rowsWithBlocks) {\n            for (const block of row.blocks) {\n              if (currentSelect.selecting['chart-timeline-grid-row-blocks'].includes(block.id)) {\n                if (typeof block.selected === 'undefined' || !block.selected) {\n                  options.selected(block, 'chart-timeline-grid-row-block');\n                }\n                block.selected = true;\n              } else {\n                if (previousSelect.selected['chart-timeline-grid-row-blocks'].includes(block.id)) {\n                  options.deselected(block, 'chart-timeline-grid-row-block');\n                }\n                block.selected = false;\n              }\n            }\n          }\n          return rowsWithBlocks;\n        });\n      };\n\n      /**\n       * Mouse down event handler\n       * @param {MouseEvent} ev\n       */\n      this.mouseDown = ev => {\n        if (ev.button !== 0) {\n          return;\n        }\n        selecting.selecting = true;\n        selecting.fromX = ev.x - this.left;\n        selecting.fromY = ev.y - this.top;\n        selecting.startX = selecting.fromX;\n        selecting.startY = selecting.fromY;\n        previousSelect = cloneSelection(state.get(path));\n        clearSelection();\n      };\n\n      /**\n       * Mouse move event handler\n       * @param {MouseEvent} ev\n       */\n      this.mouseMove = ev => {\n        select(ev);\n      };\n\n      /**\n       * Mouse up event handler\n       * @param {MouseEvent} ev\n       */\n      this.mouseUp = ev => {\n        if (selecting.selecting) {\n          endSelect(ev);\n        }\n      };\n\n      element.addEventListener('mousedown', this.mouseDown);\n      document.addEventListener('mousemove', schedule(this.mouseMove));\n      document.addEventListener('mouseup', this.mouseUp);\n      options.getApi(api);\n    }\n    destroy(element) {\n      document.removeEventListener('mouseup', this.mouseUp);\n      document.removeEventListener('mousemove', this.mouseMove);\n      element.removeEventListener('mousedown', this.mouseDown);\n    }\n  }\n\n  /**\n   * Update selection\n   * @param {any} data\n   * @param {HTMLElement} element\n   * @param {string[]} selecting\n   * @param {string[]} selected\n   * @param {string} classNameSelecting\n   * @param {string} classNameSelected\n   */\n  function updateSelection(\n    element: HTMLElement,\n    selecting: string[],\n    selected: string[],\n    classNameSelecting: string,\n    classNameSelected: string\n  ) {\n    if (selecting && !element.classList.contains(classNameSelecting)) {\n      element.classList.add(classNameSelecting);\n    } else if (!selecting && element.classList.contains(classNameSelecting)) {\n      element.classList.remove(classNameSelecting);\n    }\n    if (selected && !element.classList.contains(classNameSelected)) {\n      element.classList.add(classNameSelected);\n    } else if (!selected && element.classList.contains(classNameSelected)) {\n      element.classList.remove(classNameSelected);\n    }\n  }\n\n  /**\n   * Grid row block action\n   * @param {HTMLElement} element\n   * @param {object} data\n   * @returns {object} with update and destroy functions\n   */\n  class GridBlockAction extends Action {\n    classNameSelecting: string;\n    classNameSelected: string;\n\n    constructor(element: HTMLElement, data: any) {\n      super();\n      this.classNameSelecting = api.getClass('chart-timeline-grid-row-block') + '--selecting';\n      this.classNameSelected = api.getClass('chart-timeline-grid-row-block') + '--selected';\n      updateSelection(element, data.selecting, data.selected, this.classNameSelecting, this.classNameSelected);\n    }\n\n    update(element: HTMLElement, data: any) {\n      updateSelection(element, data.selecting, data.selected, this.classNameSelecting, this.classNameSelected);\n    }\n\n    destroy(element: Element, changedData: any) {\n      element.classList.remove(this.classNameSelecting);\n      element.classList.remove(this.classNameSelected);\n    }\n  }\n\n  /**\n   * Item action\n   * @param {Element} element\n   * @param {object} data\n   * @returns {object} with update and destroy functions\n   */\n  class ItemAction extends Action {\n    classNameSelecting: string;\n    classNameSelected: string;\n\n    constructor(element: HTMLElement, data: any) {\n      super();\n      this.classNameSelecting = api.getClass('chart-timeline-items-row-item') + '--selecting';\n      this.classNameSelected = api.getClass('chart-timeline-items-row-item') + '--selected';\n      updateSelection(\n        element,\n        data.item.selecting,\n        data.item.selected,\n        this.classNameSelecting,\n        this.classNameSelected\n      );\n    }\n\n    update(element: HTMLElement, data: any) {\n      updateSelection(\n        element,\n        data.item.selecting,\n        data.item.selected,\n        this.classNameSelecting,\n        this.classNameSelected\n      );\n    }\n\n    destroy(element: HTMLElement, data: any) {\n      element.classList.remove(this.classNameSelecting);\n      element.classList.remove(this.classNameSelected);\n    }\n  }\n\n  /**\n   * On block create handler\n   * @param {object} block\n   * @returns {object} block\n   */\n  function onBlockCreate(block) {\n    const selectedBlocks = state.get('config.plugin.selection.selected.chart-timeline-grid-row-blocks');\n    for (const selectedBlock of selectedBlocks) {\n      if (selectedBlock === block.id) {\n        block.selected = true;\n        return block;\n      }\n    }\n    block.selected = false;\n    block.selecting = false;\n    return block;\n  }\n\n  return function initialize(mainVido) {\n    vido = mainVido;\n    state = vido.state;\n    api = vido.api;\n    schedule = vido.schedule;\n    if (typeof state.get(path) === 'undefined') {\n      state.update(path, {\n        selecting: {\n          'chart-timeline-grid-rows': [],\n          'chart-timeline-grid-row-blocks': [],\n          'chart-timeline-items-rows': [],\n          'chart-timeline-items-row-items': []\n        },\n        selected: {\n          'chart-timeline-grid-rows': [],\n          'chart-timeline-grid-row-blocks': [],\n          'chart-timeline-items-rows': [],\n          'chart-timeline-items-row-items': []\n        }\n      });\n    }\n    state.update('config.chart.items', items => {\n      for (const itemId in items) {\n        const item = items[itemId];\n        if (typeof item.selecting === 'undefined') {\n          item.selecting = false;\n        }\n        if (typeof item.selected === 'undefined') {\n          item.selected = false;\n        }\n      }\n      return items;\n    });\n    state.update('config.actions.chart-timeline', actions => {\n      actions.push(SelectionAction);\n      return actions;\n    });\n    state.update('config.actions.chart-timeline-grid-row-block', actions => {\n      actions.push(GridBlockAction);\n      return actions;\n    });\n    state.update('config.actions.chart-timeline-items-row-item', actions => {\n      actions.push(ItemAction);\n      return actions;\n    });\n    state.update('config.chart.grid.block.onCreate', onCreate => {\n      onCreate.push(onBlockCreate);\n      return onCreate;\n    });\n  };\n}\n","/**\n * CalendarScroll plugin\n *\n * @copyright Rafal Pospiech <https://neuronet.io>\n * @author    Rafal Pospiech <neuronet.io@gmail.com>\n * @package   gantt-schedule-timeline-calendar\n * @license   GPL-3.0 (https://github.com/neuronetio/gantt-schedule-timeline-calendar/blob/master/LICENSE)\n * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar\n */\n\nimport { Action } from '@neuronet.io/vido';\n\nexport default function CalendarScroll(options = {}) {\n  let state, api, schedule;\n  const defaultOptions = {\n    speed: 1,\n    hideScroll: false,\n    onChange(time) {}\n  };\n  options = { ...defaultOptions, ...options };\n\n  class CalendarScrollAction extends Action {\n    isMoving: boolean = false;\n    lastX: number = 0;\n    mc: any;\n\n    constructor(element: HTMLElement) {\n      super();\n      this.onPointerStart = this.onPointerStart.bind(this);\n      this.onPointerMove = this.onPointerMove.bind(this);\n      this.onPointerEnd = this.onPointerEnd.bind(this);\n      element.addEventListener('touchstart', this.onPointerStart);\n      document.addEventListener('touchmove', this.onPointerMove);\n      document.addEventListener('touchend', this.onPointerEnd);\n      element.addEventListener('mousedown', this.onPointerStart);\n      document.addEventListener('mousemove', this.onPointerMove);\n      document.addEventListener('mouseup', this.onPointerEnd);\n      element.style.cursor = 'move';\n      const horizontalScroll = state.get('_internal.elements.horizontal-scroll');\n      // @ts-ignore\n      if (options.hideScroll && horizontalScroll) {\n        horizontalScroll.style.visibility = 'hidden';\n      }\n    }\n\n    onPointerStart(ev) {\n      if (ev.type === 'mousedown' && ev.button !== 0) return;\n      ev.stopPropagation();\n      this.isMoving = true;\n      const normalized = api.normalizePointerEvent(ev);\n      this.lastX = normalized.x;\n    }\n\n    onPointerMove(ev) {\n      schedule(() => {\n        if (!this.isMoving) return;\n        const normalized = api.normalizePointerEvent(ev);\n        const movedX = normalized.x - this.lastX;\n        const time = state.get('_internal.chart.time');\n        // @ts-ignore\n        const movedTime = -Math.round(movedX * time.timePerPixel * options.speed);\n        state.update('config.chart.time', configTime => {\n          if (configTime.from === 0) configTime.from = time.from;\n          if (configTime.to === 0) configTime.to = time.to;\n          configTime.from += movedTime;\n          configTime.to += movedTime;\n          // @ts-ignore\n          options.onChange(configTime);\n          return configTime;\n        });\n        this.lastX = normalized.x;\n      })();\n    }\n\n    onPointerEnd(ev) {\n      this.isMoving = false;\n      this.lastX = 0;\n    }\n\n    destroy(element: HTMLElement, data: any) {\n      element.removeEventListener('touchstart', this.onPointerStart);\n      document.removeEventListener('touchmove', this.onPointerMove);\n      document.removeEventListener('touchend', this.onPointerEnd);\n      element.removeEventListener('mousedown', this.onPointerStart);\n      document.removeEventListener('mousemove', this.onPointerMove);\n      document.removeEventListener('mouseup', this.onPointerEnd);\n    }\n  }\n\n  return function initialize(vido) {\n    api = vido.api;\n    state = vido.state;\n    schedule = vido.schedule;\n    state.update('config.actions.chart-calendar', actions => {\n      actions.push(CalendarScrollAction);\n      return actions;\n    });\n  };\n}\n"],"names":["String","Math","random","slice","document","createComment","createElement","createTextNode","eventOptionsSupported","options","capture","window","addEventListener","removeEventListener","_e","push","Action","[object Object]","this","isAction","prototype","ItemHold","api","defaultOptions","time","movementThreshold","element","data","holding","pointer","x","y","onPointerUp","itemId","action","elementPointerDown","event","onPointerDown","item","id","normalized","normalizePointerEvent","stopPropagation","preventDefault","setTimeout","exec","xMovement","abs","yMovement","pointerUp","onPointerMove","changedData","initialize","vido","state","update","actions","ItemMovement","moveable","resizeable","resizerContent","collisionDetection","outOfBorders","snapStart","timeStart","startDiff","snapEnd","timeEnd","endDiff","ghostNode","movementState","isResizeable","hasOwnProperty","row","getMovement","moving","resizing","moveGhost","ev","movement","left","ganttLeft","itemLeftCompensation","ghost","style","top","ganttTop","itemTop","parseInt","getComputedStyle","destroyGhost","get","removeChild","getSnapStart","getSnapEnd","resizerHTML","getClass","insertAdjacentHTML","resizerEl","querySelector","labelMouseDown","button","chartLeftTime","timePerPixel","ganttRect","getBoundingClientRect","itemX","round","start","createGhost","cloneNode","compensation","position","offsetTop","width","height","clientHeight","opacity","transform","appendChild","resizerMouseDown","end","isCollision","rowId","from","to","diff","date","sign","rowItem","_internal","items","documentMouseMove","zoom","isMoveable","Array","isArray","includes","movementX","add","originalStart","finalAdd","collision","moveItem","visibleRowsIndex","movementY","visibleRows","index","currentRow","length","newRow","newRowId","resizeX","leftGlobal","originalEnd","documentMouseUp","visibility","passive","node","remove","SaveAsImage","saveAsImage","target","clientWidth","html","unescape","encodeURIComponent","outerHTML","styleSheet","styleSheets","title","rule","rules","cssText","svg","canvas","ctx","getContext","fillStyle","fillRect","svg64","btoa","img","Image","onload","onLoad","drawImage","downloadImage","filename","a","href","download","body","click","toDataURL","src","subscribe","main","Selection","schedule","path","rectClassName","rect","classList","background","border","grid","rows","horizontal","vertical","rectStyle","canSelect","type","currently","all","canDeselect","Object","styleProp","selecting","fromX","fromY","toX","toY","startX","startY","startCell","selectionTypesIdGetters","chart-timeline-grid-row","props","chart-timeline-grid-row-block","chart-timeline-items-row","chart-timeline-items-row-item","SelectionAction","super","previousSelect","clearSelection","force","selectingState","chart-timeline-grid-rows","chart-timeline-grid-row-blocks","chart-timeline-items-rows","chart-timeline-items-row-items","selected","clearRowsWithBlocks","rowsWithBlocks","block","blocks","unsub","subscribeAll","bulk","chartTimeline","undefined","insertAdjacentElement","bounding","saveAndSwapIfNeeded","currentX","currentY","isInside","boundingRect","rectBoundingRect","right","bottom","getSelecting","elements","getId","selectingResult","currentlySelectingData","currentAll","currentSelecting","unshift","deselecting","endSelect","currentSelect","select","value","updateItems","now","updateRowsWithBlocks","deselected","mouseDown","cloneSelection","result","mouseMove","nowSelecting","only","nowBlocks","nowRows","mouseUp","getApi","updateSelection","classNameSelecting","classNameSelected","contains","GridBlockAction","ItemAction","onBlockCreate","selectedBlocks","selectedBlock","mainVido","onCreate","CalendarScroll","speed","hideScroll","CalendarScrollAction","onPointerStart","bind","onPointerEnd","cursor","horizontalScroll","isMoving","lastX","movedX","movedTime","configTime","onChange"],"mappings":"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"}